{"version":3,"sources":["../../../../src/config/default/command/regex_indexer.js"],"names":["symbol","xenon","indexToLine","util","module","exports","info","tags","regexInfos","regexes","path","debug","text","inputs","iterations","forEach","regexInfo","m","regex","RegExp","console","log","exec","expr","eval","symbolIndex","push","locator","index","type","error","updateSymbols"],"mappings":";;AAAA,IAAIA,SAASC,MAAMD,MAAnB;AACA,IAAIE,cAAcD,MAAME,IAAN,CAAWD,WAA7B;;AAEA;;;AAGAE,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC5B,QAAIC,OAAO,EAAX;AACA,QAAIC,aAAaF,KAAKG,OAAtB;AACA,QAAIC,OAAOJ,KAAKI,IAAhB;AACA,QAAIC,QAAQL,KAAKK,KAAjB;AACA,QAAIC,OAAON,KAAKO,MAAL,CAAYD,IAAvB;AACA,QAAIE,aAAa,CAAjB;AACA;AACAN,eAAWO,OAAX,CAAmB,UAASC,SAAT,EAAoB;AACnC,YAAIC,CAAJ;AACA,YAAIC,QAAQ,IAAIC,MAAJ,CAAWH,UAAUE,KAArB,EAA4B,IAA5B,CAAZ;AACA,YAAGP,KAAH,EAAU;AACNS,oBAAQC,GAAR,CAAY,oBAAZ,EAAkCL,UAAUE,KAA5C;AACH;AACD,eAAOD,IAAIC,MAAMI,IAAN,CAAWV,IAAX,CAAX,EAA6B;AACzB,gBAAGD,KAAH,EAAU;AACNS,wBAAQC,GAAR,CAAY,aAAZ,EAA2BJ,CAA3B;AACH;AACD,gBAAIjB,MAAJ;AACA,gBAAGgB,UAAUO,IAAb,EAAmB;AACfvB,yBAASwB,KAAKR,UAAUO,IAAf,CAAT;AACH,aAFD,MAEO;AACHvB,yBAASiB,EAAED,UAAUS,WAAZ,CAAT;AACH;AACDlB,iBAAKmB,IAAL,CAAU;AACNhB,sBAAMA,IADA;AAENV,wBAAQA,MAFF;AAGN2B,yBAASzB,YAAYU,IAAZ,EAAkBK,EAAEW,KAApB,CAHH;AAINC,sBAAMb,UAAUa;AAJV,aAAV;AAMAf;AACA,gBAAGA,aAAa,KAAhB,EAAuB;AACnB,uBAAOM,QAAQU,KAAR,CAAc,+BAAd,CAAP;AACH;AACJ;AAEJ,KA5BD;;AA8BA,WAAO9B,OAAO+B,aAAP,CAAqBrB,IAArB,EAA2BH,IAA3B,CAAP;AACH,CAvCD","file":"regex_indexer.js","sourcesContent":["var symbol = xenon.symbol;\nvar indexToLine = xenon.util.indexToLine;\n\n/**\n * inputs: text\n */\nmodule.exports = function(info) {\n    var tags = [];\n    var regexInfos = info.regexes;\n    var path = info.path;\n    var debug = info.debug;\n    var text = info.inputs.text;\n    var iterations = 0;\n    // Regular old functions\n    regexInfos.forEach(function(regexInfo) {\n        var m;\n        var regex = new RegExp(regexInfo.regex, \"mg\");\n        if(debug) {\n            console.log(\"Now searching for:\", regexInfo.regex);\n        }\n        while (m = regex.exec(text)) {\n            if(debug) {\n                console.log(\"Got a match\", m);\n            }\n            var symbol;\n            if(regexInfo.expr) {\n                symbol = eval(regexInfo.expr);\n            } else {\n                symbol = m[regexInfo.symbolIndex];\n            }\n            tags.push({\n                path: path,\n                symbol: symbol,\n                locator: indexToLine(text, m.index),\n                type: regexInfo.type\n            });\n            iterations++;\n            if(iterations > 10000) {\n                return console.error(\"Too many results, jumping out\");\n            }\n        }\n\n    });\n\n    return symbol.updateSymbols(path, tags);\n};\n"]}