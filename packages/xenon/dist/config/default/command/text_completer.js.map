{"version":3,"sources":["../../../../src/config/default/command/text_completer.js"],"names":["session","xenon","splitRegex","module","exports","info","path","getWordIndex","pos","getTextRange","row","column","then","textBefore","split","length","wordDistance","words","text","prefixPos","wordScores","Map","currentWord","forEach","word","idx","distance","Math","abs","score","has","set","max","get","getText","text_","getCursorPosition","wordList","Array","from","keys","map","name","value","icon"],"mappings":"AAAA;;AAEA,IAAIA,UAAUC,MAAMD,OAApB;;AAEA,IAAIE,aAAa,oBAAjB;;AAEAC,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC5B,QAAIC,OAAOD,KAAKC,IAAhB;;AAEA,aAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,eAAOR,QAAQS,YAAR,CAAqBH,IAArB,EAA2B;AAC9BI,iBAAK,CADyB;AAE9BC,oBAAQ;AAFsB,SAA3B,EAGJH,GAHI,EAGCI,IAHD,CAGM,UAASC,UAAT,EAAqB;AAC9B,mBAAOA,WAAWC,KAAX,CAAiBZ,UAAjB,EAA6Ba,MAA7B,GAAsC,CAA7C;AACH,SALM,CAAP;AAMH;;AAED;;;;AAIA,aAASC,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCV,GAAnC,EAAwC;AACpC,eAAOD,aAAaC,GAAb,EAAkBI,IAAlB,CAAuB,UAASO,SAAT,EAAoB;AAC9C,gBAAIC,aAAa,IAAIC,GAAJ,EAAjB;AACA,gBAAIC,cAAcL,MAAME,SAAN,CAAlB;;AAEAF,kBAAMM,OAAN,CAAc,UAASC,IAAT,EAAeC,GAAf,EAAoB;AAC9B,oBAAI,CAACD,IAAD,IAASA,SAASF,WAAtB,EAAmC;AAC/B;AACH;;AAED,oBAAII,WAAWC,KAAKC,GAAL,CAAST,YAAYM,GAArB,CAAf;AACA,oBAAII,QAAQZ,MAAMF,MAAN,GAAeW,QAA3B;AACA,oBAAIN,WAAWU,GAAX,CAAeN,IAAf,CAAJ,EAA0B;AACtBJ,+BAAWW,GAAX,CAAeP,IAAf,EAAqBG,KAAKK,GAAL,CAASH,KAAT,EAAgBT,WAAWa,GAAX,CAAeT,IAAf,CAAhB,CAArB;AACH,iBAFD,MAEO;AACHJ,+BAAWW,GAAX,CAAeP,IAAf,EAAqBK,KAArB;AACH;AACJ,aAZD;;AAcA,mBAAOT,UAAP;AACH,SAnBM,CAAP;AAoBH;;AAED,QAAIF,IAAJ;AACA,QAAID,KAAJ;AACA,WAAOjB,QAAQkC,OAAR,CAAgB5B,IAAhB,EAAsBM,IAAtB,CAA2B,UAASuB,KAAT,EAAgB;AAC9CjB,eAAOiB,KAAP;AACAlB,gBAAQC,KAAKJ,KAAL,CAAWZ,UAAX,CAAR;AACA,eAAOF,QAAQoC,iBAAR,CAA0B9B,IAA1B,CAAP;AACH,KAJM,EAIJM,IAJI,CAIC,UAASJ,GAAT,EAAc;AAClB,eAAOQ,aAAaC,KAAb,EAAoBC,IAApB,EAA0BV,GAA1B,CAAP;AACH,KANM,EAMJI,IANI,CAMC,UAASQ,UAAT,EAAqB;AACzB,YAAIiB,WAAWC,MAAMC,IAAN,CAAWnB,WAAWoB,IAAX,EAAX,CAAf;AACA,eAAOH,SAASI,GAAT,CAAa,UAASjB,IAAT,EAAe;AAC/B;AACA,mBAAO;AACHkB,sBAAMlB,IADH;AAEHmB,uBAAOnB,IAFJ;AAGHK,uBAAO,OAAQT,WAAWa,GAAX,CAAeT,IAAf,IAAuBP,MAAMF,MAHzC;AAIH6B,sBAAM;AAJH,aAAP;AAMH,SARM,CAAP;AASH,KAjBM,CAAP;AAkBH,CA3DD","file":"text_completer.js","sourcesContent":["'use strict';\n\nvar session = xenon.session;\n\nvar splitRegex = /[^a-zA-Z_0-9\\$\\-]+/;\n\nmodule.exports = function(info) {\n    var path = info.path;\n\n    function getWordIndex(pos) {\n        return session.getTextRange(path, {\n            row: 0,\n            column: 0\n        }, pos).then(function(textBefore) {\n            return textBefore.split(splitRegex).length - 1;\n        });\n    }\n\n    /**\n     * Does a distance analysis of the word `prefix` at position `pos` in `doc`.\n     * @return Map\n     */\n    function wordDistance(words, text, pos) {\n        return getWordIndex(pos).then(function(prefixPos) {\n            var wordScores = new Map();\n            var currentWord = words[prefixPos];\n\n            words.forEach(function(word, idx) {\n                if (!word || word === currentWord) {\n                    return;\n                }\n\n                var distance = Math.abs(prefixPos - idx);\n                var score = words.length - distance;\n                if (wordScores.has(word)) {\n                    wordScores.set(word, Math.max(score, wordScores.get(word)));\n                } else {\n                    wordScores.set(word, score);\n                }\n            });\n\n            return wordScores;\n        });\n    }\n\n    var text;\n    var words;\n    return session.getText(path).then(function(text_) {\n        text = text_;\n        words = text.split(splitRegex);\n        return session.getCursorPosition(path);\n    }).then(function(pos) {\n        return wordDistance(words, text, pos);\n    }).then(function(wordScores) {\n        var wordList = Array.from(wordScores.keys());\n        return wordList.map(function(word) {\n            // console.log(\"cores\", (wordScores.get(word) / words.length));\n            return {\n                name: word,\n                value: word,\n                score: 10.0 + (wordScores.get(word) / words.length),\n                icon: \"local\"\n            };\n        });\n    });\n};\n"]}