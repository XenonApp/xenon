{"version":3,"sources":["../../../../src/config/default/command/stripper.js"],"names":["module","exports","info","inputs","isInsertingSnippet","preferences","trimWhitespaceOnSave","internal","min","trimEmptyLines","currentLines","cursors","map","c","row","lines","lastNonBlank","i","length","test","indexOf","column","search","xenon","session","removeInLine","path","append","then","callCommand","Math","max","removeLines"],"mappings":"AAAA;;AAEAA,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC5B;AACA,QAAIA,KAAKC,MAAL,CAAYC,kBAAZ,IAAmC,CAACF,KAAKC,MAAL,CAAYE,WAAZ,CAAwBC,oBAAzB,IAAiDJ,KAAKK,QAA7F,EAAwG;AACpG;AACH;;AAED,QAAIC,MAAMN,KAAKC,MAAL,CAAYE,WAAZ,CAAwBI,cAAxB,GAAyC,CAAC,CAA1C,GAA8C,CAAxD;;AAEA,QAAIC,eAAeR,KAAKC,MAAL,CAAYQ,OAAZ,CAAoBC,GAApB,CAAwB,UAASC,CAAT,EAAY;AACnD,eAAOA,EAAEC,GAAT;AACH,KAFkB,CAAnB;AAGA,QAAIC,QAAQb,KAAKC,MAAL,CAAYY,KAAxB;AACA,QAAIC,eAAe,CAAnB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,YAAI,KAAKE,IAAL,CAAUJ,MAAME,CAAN,CAAV,CAAJ,EAAyB;AACrBD,2BAAeC,CAAf;AACH;AACD;AACA,YAAIP,aAAaU,OAAb,CAAqBH,CAArB,MAA4B,CAAC,CAAjC,EAAoC;AAChC;AACH;;AAED,YAAII,SAASN,MAAME,CAAN,EAASK,MAAT,CAAgB,MAAhB,CAAb;AACA,YAAID,SAASb,GAAb,EAAkB;AACde,kBAAMC,OAAN,CAAcC,YAAd,CAA2BvB,KAAKwB,IAAhC,EAAsCT,CAAtC,EAAyCI,MAAzC,EAAiDN,MAAME,CAAN,EAASC,MAA1D;AACH;AACJ;;AAED,QAAIH,MAAMA,MAAMG,MAAN,GAAe,CAArB,MAA4B,EAAhC,EAAoC;AAChC;AACA,eAAOK,MAAMC,OAAN,CAAcG,MAAd,CAAqBzB,KAAKwB,IAA1B,EAAgC,IAAhC,EAAsCE,IAAtC,CAA2C,YAAW;AACzD,gBAAIlB,aAAa,CAAb,MAAoBK,MAAMG,MAAN,GAAe,CAAvC,EAA0C;AACtCK,sBAAMC,OAAN,CAAcK,WAAd,CAA0B3B,KAAKwB,IAA/B,EAAqC,aAArC;AACH;AACJ,SAJM,CAAP;AAKH,KAPD,MAOO;AACH;AACA,YAAIZ,MAAMgB,KAAKC,GAAL,CAASrB,aAAa,CAAb,CAAT,EAA0BM,YAA1B,IAA0C,CAApD;AACA,YAAIF,MAAMC,MAAMG,MAAN,GAAe,CAAzB,EAA4B;AACxB,mBAAOK,MAAMC,OAAN,CAAcQ,WAAd,CAA0B9B,KAAKwB,IAA/B,EAAqCZ,GAArC,EAA0CC,MAAMG,MAAhD,CAAP;AACH;AACJ;AACJ,CA3CD","file":"stripper.js","sourcesContent":["'use strict';\n\nmodule.exports = function(info) {\n    // Don't strip while inserting snippets, or auto-strip when pref not set.\n    if (info.inputs.isInsertingSnippet || (!info.inputs.preferences.trimWhitespaceOnSave && info.internal)) {\n        return;\n    }\n\n    var min = info.inputs.preferences.trimEmptyLines ? -1 : 0;\n\n    var currentLines = info.inputs.cursors.map(function(c) {\n        return c.row;\n    });\n    var lines = info.inputs.lines;\n    var lastNonBlank = 0;\n\n    for (var i = 0; i < lines.length; i++) {\n        if (/\\S/.test(lines[i])) {\n            lastNonBlank = i;\n        }\n        // Preserve spaces on the line we're on.\n        if (currentLines.indexOf(i) !== -1) {\n            continue;\n        }\n\n        var column = lines[i].search(/\\s+$/);\n        if (column > min) {\n            xenon.session.removeInLine(info.path, i, column, lines[i].length);\n        }\n    }\n\n    if (lines[lines.length - 1] !== \"\") {\n        // Enforce newline at end of file.\n        return xenon.session.append(info.path, \"\\n\").then(function() {\n            if (currentLines[0] === lines.length - 1) {\n                xenon.session.callCommand(info.path, \"Cursor:Left\");\n            }\n        });\n    } else {\n        // Strip blank lines, but not above the cursor position.\n        var row = Math.max(currentLines[0], lastNonBlank) + 1;\n        if (row < lines.length - 1) {\n            return xenon.session.removeLines(info.path, row, lines.length);\n        }\n    }\n};\n"]}