{"version":3,"sources":["../../../../src/config/default/command/symbol_completer.js"],"names":["session","xenon","symbol","module","exports","info","path","getPreceedingIdentifier","then","prefix","getSymbols","limit","symbols","matches","matchedSymbols","Map","forEach","has","set","pathParts","split","parenPos","indexOf","push","name","value","snippet","substring","replace","meta","length","score","icon"],"mappings":"AAAA;;AAEA,IAAIA,UAAUC,MAAMD,OAApB;AACA,IAAIE,SAASD,MAAMC,MAAnB;;AAEAC,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC5B,QAAIC,OAAOD,KAAKC,IAAhB;;AAEA,WAAON,QAAQO,uBAAR,CAAgCD,IAAhC,EAAsCE,IAAtC,CAA2C,UAASC,MAAT,EAAiB;AAC/D,eAAOP,OAAOQ,UAAP,CAAkB;AACrBD,oBAAQA,MADa;AAErBE,mBAAO;AAFc,SAAlB,CAAP;AAIH,KALM,EAKJH,IALI,CAKC,UAASI,OAAT,EAAkB;AACtB,YAAIC,UAAU,EAAd;AACA,YAAIC,iBAAiB,IAAIC,GAAJ,EAArB;AACAH,gBAAQI,OAAR,CAAgB,UAASd,MAAT,EAAiB;AAC7B,gBAAIY,eAAeG,GAAf,CAAmBf,OAAOA,MAA1B,CAAJ,EAAuC;AACnC,uBADmC,CAC3B;AACX;AACDY,2BAAeI,GAAf,CAAmBhB,OAAOA,MAA1B,EAAkC,IAAlC;AACA,gBAAIiB,YAAYjB,OAAOI,IAAP,CAAYc,KAAZ,CAAkB,GAAlB,CAAhB;AACA,gBAAIC,WAAWnB,OAAOA,MAAP,CAAcoB,OAAd,CAAsB,GAAtB,CAAf;AACA;AACA;AACA;AACA,gBAAID,aAAa,CAAC,CAAlB,EAAqB;AACjBR,wBAAQU,IAAR,CAAa;AACTC,0BAAMtB,OAAOA,MADJ;AAETuB,2BAAOvB,OAAOA,MAFL;AAGTwB,6BAASxB,OAAOA,MAAP,CAAcyB,SAAd,CAAwB,CAAxB,EAA2BN,QAA3B,EAAqCO,OAArC,CAA6C,GAA7C,EAAkD,KAAlD,IAA2D,QAH3D;AAITC,0BAAMV,UAAUA,UAAUW,MAAV,GAAmB,CAA7B,CAJG;AAKTC,2BAAO,CALE;AAMTC,0BAAM;AANG,iBAAb;AAQH,aATD,MASO;AACHnB,wBAAQU,IAAR,CAAa;AACTC,0BAAMtB,OAAOA,MADJ;AAETuB,2BAAOvB,OAAOA,MAFL;AAGT2B,0BAAMV,UAAUA,UAAUW,MAAV,GAAmB,CAA7B,CAHG;AAITC,2BAAO,CAJE;AAKTC,0BAAM;AALG,iBAAb;AAOH;AACJ,SA5BD;AA6BA,eAAOnB,OAAP;AACH,KAtCM,CAAP;AAuCH,CA1CD","file":"symbol_completer.js","sourcesContent":["'use strict';\n\nvar session = xenon.session;\nvar symbol = xenon.symbol;\n\nmodule.exports = function(info) {\n    var path = info.path;\n\n    return session.getPreceedingIdentifier(path).then(function(prefix) {\n        return symbol.getSymbols({\n            prefix: prefix,\n            limit: 200\n        });\n    }).then(function(symbols) {\n        var matches = [];\n        var matchedSymbols = new Map();\n        symbols.forEach(function(symbol) {\n            if (matchedSymbols.has(symbol.symbol)) {\n                return; // Not interested in duplicates\n            }\n            matchedSymbols.set(symbol.symbol, true);\n            var pathParts = symbol.path.split('/');\n            var parenPos = symbol.symbol.indexOf('(');\n            // If we have a symbol with parentheses, empty the argument list\n            // when inserting, and complete it as a snippet, putting the cursor\n            // in between the parentheses.\n            if (parenPos !== -1) {\n                matches.push({\n                    name: symbol.symbol,\n                    value: symbol.symbol,\n                    snippet: symbol.symbol.substring(0, parenPos).replace(\"$\", \"\\\\$\") + \"(${1})\",\n                    meta: pathParts[pathParts.length - 1],\n                    score: 1,\n                    icon: \"function\"\n                });\n            } else {\n                matches.push({\n                    name: symbol.symbol,\n                    value: symbol.symbol,\n                    meta: pathParts[pathParts.length - 1],\n                    score: 1,\n                    icon: \"function\"\n                });\n            }\n        });\n        return matches;\n    });\n};\n"]}