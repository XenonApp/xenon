{"version":3,"sources":["../../../../../src/config/default/mode/markdown/pagedown.js"],"names":["Markdown","exports","identity","x","returnFalse","HookCollection","prototype","chain","hookname","func","original","Error","text","args","Array","slice","call","arguments","apply","set","addNoop","addFalse","SaveHash","key","value","get","Converter","pluginHooks","hooks","g_urls","g_titles","g_html_blocks","g_list_level","makeHtml","preConversion","replace","_Detab","postNormalization","_HashHTMLBlocks","_StripLinkDefinitions","_RunBlockGamut","_UnescapeSpecialChars","postConversion","wholeMatch","m1","m2","m3","m4","m5","toLowerCase","_EncodeAmpsAndAngles","block_tags_a","block_tags_b","hashElement","blockText","push","blockGamutHookCallback","t","doNotUnhash","preBlockGamut","_DoHeaders","replacement","_DoLists","_DoCodeBlocks","_DoBlockQuotes","postBlockGamut","_FormParagraphs","_RunSpanGamut","preSpanGamut","_DoCodeSpans","_EscapeSpecialCharsWithinTagAttributes","_EncodeBackslashEscapes","_DoImages","_DoAnchors","_DoAutoLinks","_DoItalicsAndBold","postSpanGamut","regex","tag","escapeCharacters","charAt","writeAnchorTag","m6","m7","undefined","whole_match","link_text","link_id","url","title","search","encodeProblemUrlChars","result","attributeEncode","writeImageTag","alt_text","matchFound","h_level","length","isInsideParagraphlessListItem","whole_list","list","list_type","_ProcessListItems","runup","_listItemMarkers","ol","ul","list_str","marker","re","RegExp","last_item_had_a_double_newline","item","leading_space","ends_with_double_newline","test","contains_double_newline","_Outdent","codeblock","nextChar","_EncodeCode","hashBlock","c","bq","pre","grafs","split","grafsOut","markerRe","end","i","str","foundAny","id","join","escapeCharacters_callback","charInsideUrl","charEndingUrl","autoLinkRegex","endCharRegex","handleTrailingParens","lookbehind","protocol","link","parens","match","level","tail","trailingParens","lastChar","substr","replacer","wholematch","plainLinkText","charCodeToReplace","parseInt","String","fromCharCode","spaces","skew","v","offset","_problemUrlChars","len","charCodeAt","toString","charsToEscape","afterBackslash","regexString","charCodeToEscape"],"mappings":"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","file":"pagedown.js","sourcesContent":["/**\n * License:\n * A javascript port of Markdown, as used on Stack Overflow\n * and the rest of Stack Exchange network.\n * \n * Largely based on showdown.js by John Fraser (Attacklab).\n * \n * Original Markdown Copyright (c) 2004-2005 John Gruber\n *   <http://daringfireball.net/projects/markdown/>\n * \n * \n * Original Showdown code copyright (c) 2007 John Fraser\n * \n * Modifications and bugfixes (c) 2009 Dana Robinson\n * Modifications and bugfixes (c) 2009-2013 Stack Exchange Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n \n    \nvar Markdown = exports;\n\n// The following text is included for historical reasons, but should\n// be taken with a pinch of salt; it's not all true anymore.\n\n//\n// Wherever possible, Showdown is a straight, line-by-line port\n// of the Perl version of Markdown.\n//\n// This is not a normal parser design; it's basically just a\n// series of string substitutions.  It's hard to read and\n// maintain this way,  but keeping Showdown close to the original\n// design makes it easier to port new features.\n//\n// More importantly, Showdown behaves like markdown.pl in most\n// edge cases.  So web applications can do client-side preview\n// in Javascript, and then build identical HTML on the server.\n//\n// This port needs the new RegExp functionality of ECMA 262,\n// 3rd Edition (i.e. Javascript 1.5).  Most modern web browsers\n// should do fine.  Even with the new regular expression features,\n// We do a lot of work to emulate Perl's regex functionality.\n// The tricky changes in this file mostly have the \"attacklab:\"\n// label.  Major or self-explanatory changes don't.\n//\n// Smart diff tools like Araxis Merge will be able to match up\n// this file with markdown.pl in a useful way.  A little tweaking\n// helps: in a copy of markdown.pl, replace \"#\" with \"//\" and\n// replace \"$text\" with \"text\".  Be sure to ignore whitespace\n// and line endings.\n//\n\n\n//\n// Usage:\n//\n//   var text = \"Markdown *rocks*.\";\n//\n//   var converter = new Markdown.Converter();\n//   var html = converter.makeHtml(text);\n//\n//   alert(html);\n//\n// Note: move the sample code to the bottom of this\n// file before uncommenting it.\n//\n\n(function () {\n\n    function identity(x) { return x; }\n    function returnFalse(x) { return false; }\n\n    function HookCollection() { }\n\n    HookCollection.prototype = {\n\n        chain: function (hookname, func) {\n            var original = this[hookname];\n            if (!original)\n                throw new Error(\"unknown hook \" + hookname);\n\n            if (original === identity)\n                this[hookname] = func;\n            else\n                this[hookname] = function (text) {\n                    var args = Array.prototype.slice.call(arguments, 0);\n                    args[0] = original.apply(null, args);\n                    return func.apply(null, args);\n                };\n        },\n        set: function (hookname, func) {\n            if (!this[hookname])\n                throw new Error(\"unknown hook \" + hookname);\n            this[hookname] = func;\n        },\n        addNoop: function (hookname) {\n            this[hookname] = identity;\n        },\n        addFalse: function (hookname) {\n            this[hookname] = returnFalse;\n        }\n    };\n\n    Markdown.HookCollection = HookCollection;\n\n    // g_urls and g_titles allow arbitrary user-entered strings as keys. This\n    // caused an exception (and hence stopped the rendering) when the user entered\n    // e.g. [push] or [__proto__]. Adding a prefix to the actual key prevents this\n    // (since no builtin property starts with \"s_\"). See\n    // http://meta.stackoverflow.com/questions/64655/strange-wmd-bug\n    // (granted, switching from Array() to Object() alone would have left only __proto__\n    // to be a problem)\n    function SaveHash() { }\n    SaveHash.prototype = {\n        set: function (key, value) {\n            this[\"s_\" + key] = value;\n        },\n        get: function (key) {\n            return this[\"s_\" + key];\n        }\n    };\n\n    Markdown.Converter = function () {\n        var pluginHooks = this.hooks = new HookCollection();\n        \n        // given a URL that was encountered by itself (without markup), should return the link text that's to be given to this link\n        pluginHooks.addNoop(\"plainLinkText\");\n        \n        // called with the orignal text as given to makeHtml. The result of this plugin hook is the actual markdown source that will be cooked\n        pluginHooks.addNoop(\"preConversion\");\n        \n        // called with the text once all normalizations have been completed (tabs to spaces, line endings, etc.), but before any conversions have\n        pluginHooks.addNoop(\"postNormalization\");\n        \n        // Called with the text before / after creating block elements like code blocks and lists. Note that this is called recursively\n        // with inner content, e.g. it's called with the full text, and then only with the content of a blockquote. The inner\n        // call will receive outdented text.\n        pluginHooks.addNoop(\"preBlockGamut\");\n        pluginHooks.addNoop(\"postBlockGamut\");\n        \n        // called with the text of a single block element before / after the span-level conversions (bold, code spans, etc.) have been made\n        pluginHooks.addNoop(\"preSpanGamut\");\n        pluginHooks.addNoop(\"postSpanGamut\");\n        \n        // called with the final cooked HTML code. The result of this plugin hook is the actual output of makeHtml\n        pluginHooks.addNoop(\"postConversion\");\n\n        //\n        // Private state of the converter instance:\n        //\n\n        // Global hashes, used by various utility routines\n        var g_urls;\n        var g_titles;\n        var g_html_blocks;\n\n        // Used to track when we're inside an ordered or unordered list\n        // (see _ProcessListItems() for details):\n        var g_list_level;\n\n        this.makeHtml = function (text) {\n\n            //\n            // Main function. The order in which other subs are called here is\n            // essential. Link and image substitutions need to happen before\n            // _EscapeSpecialCharsWithinTagAttributes(), so that any *'s or _'s in the <a>\n            // and <img> tags get encoded.\n            //\n\n            // This will only happen if makeHtml on the same converter instance is called from a plugin hook.\n            // Don't do that.\n            if (g_urls)\n                throw new Error(\"Recursive call to converter.makeHtml\");\n        \n            // Create the private state objects.\n            g_urls = new SaveHash();\n            g_titles = new SaveHash();\n            g_html_blocks = [];\n            g_list_level = 0;\n\n            text = pluginHooks.preConversion(text);\n\n            // attacklab: Replace ~ with ~T\n            // This lets us use tilde as an escape char to avoid md5 hashes\n            // The choice of character is arbitray; anything that isn't\n            // magic in Markdown will work.\n            text = text.replace(/~/g, \"~T\");\n\n            // attacklab: Replace $ with ~D\n            // RegExp interprets $ as a special character\n            // when it's in a replacement string\n            text = text.replace(/\\$/g, \"~D\");\n\n            // Standardize line endings\n            text = text.replace(/\\r\\n/g, \"\\n\"); // DOS to Unix\n            text = text.replace(/\\r/g, \"\\n\"); // Mac to Unix\n\n            // Make sure text begins and ends with a couple of newlines:\n            text = \"\\n\\n\" + text + \"\\n\\n\";\n\n            // Convert all tabs to spaces.\n            text = _Detab(text);\n\n            // Strip any lines consisting only of spaces and tabs.\n            // This makes subsequent regexen easier to write, because we can\n            // match consecutive blank lines with /\\n+/ instead of something\n            // contorted like /[ \\t]*\\n+/ .\n            text = text.replace(/^[ \\t]+$/mg, \"\");\n            \n            text = pluginHooks.postNormalization(text);\n\n            // Turn block-level HTML blocks into hash entries\n            text = _HashHTMLBlocks(text);\n\n            // Strip link definitions, store in hashes.\n            text = _StripLinkDefinitions(text);\n\n            text = _RunBlockGamut(text);\n\n            text = _UnescapeSpecialChars(text);\n\n            // attacklab: Restore dollar signs\n            text = text.replace(/~D/g, \"$$\");\n\n            // attacklab: Restore tildes\n            text = text.replace(/~T/g, \"~\");\n\n            text = pluginHooks.postConversion(text);\n\n            g_html_blocks = g_titles = g_urls = null;\n\n            return text;\n        };\n\n        function _StripLinkDefinitions(text) {\n            //\n            // Strips link definitions from text, stores the URLs and titles in\n            // hash references.\n            //\n\n            // Link defs are in the form: ^[id]: url \"optional title\"\n\n            /*\n            text = text.replace(/\n                ^[ ]{0,3}\\[(.+)\\]:  // id = $1  attacklab: g_tab_width - 1\n                [ \\t]*\n                \\n?                 // maybe *one* newline\n                [ \\t]*\n                <?(\\S+?)>?          // url = $2\n                (?=\\s|$)            // lookahead for whitespace instead of the lookbehind removed below\n                [ \\t]*\n                \\n?                 // maybe one newline\n                [ \\t]*\n                (                   // (potential) title = $3\n                    (\\n*)           // any lines skipped = $4 attacklab: lookbehind removed\n                    [ \\t]+\n                    [\"(]\n                    (.+?)           // title = $5\n                    [\")]\n                    [ \\t]*\n                )?                  // title is optional\n                (?:\\n+|$)\n            /gm, function(){...});\n            */\n\n            text = text.replace(/^[ ]{0,3}\\[(.+)\\]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?=\\s|$)[ \\t]*\\n?[ \\t]*((\\n*)[\"(](.+?)[\")][ \\t]*)?(?:\\n+)/gm,\n                function (wholeMatch, m1, m2, m3, m4, m5) {\n                    m1 = m1.toLowerCase();\n                    g_urls.set(m1, _EncodeAmpsAndAngles(m2));  // Link IDs are case-insensitive\n                    if (m4) {\n                        // Oops, found blank lines, so it's not a title.\n                        // Put back the parenthetical statement we stole.\n                        return m3;\n                    } else if (m5) {\n                        g_titles.set(m1, m5.replace(/\"/g, \"&quot;\"));\n                    }\n\n                    // Completely remove the definition from the text\n                    return \"\";\n                }\n            );\n\n            return text;\n        }\n\n        function _HashHTMLBlocks(text) {\n\n            // Hashify HTML blocks:\n            // We only want to do this for block-level HTML tags, such as headers,\n            // lists, and tables. That's because we still want to wrap <p>s around\n            // \"paragraphs\" that are wrapped in non-block-level tags, such as anchors,\n            // phrase emphasis, and spans. The list of tags we're looking for is\n            // hard-coded:\n            var block_tags_a = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del\"\n            var block_tags_b = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math\"\n\n            // First, look for nested blocks, e.g.:\n            //   <div>\n            //     <div>\n            //     tags for inner block must be indented.\n            //     </div>\n            //   </div>\n            //\n            // The outermost tags must start at the left margin for this to match, and\n            // the inner nested divs must be indented.\n            // We need to do this before the next, more liberal match, because the next\n            // match will start at the first `<div>` and stop at the first `</div>`.\n\n            // attacklab: This regex can be expensive when it fails.\n\n            /*\n            text = text.replace(/\n                (                       // save in $1\n                    ^                   // start of line  (with /m)\n                    <($block_tags_a)    // start tag = $2\n                    \\b                  // word break\n                                        // attacklab: hack around khtml/pcre bug...\n                    [^\\r]*?\\n           // any number of lines, minimally matching\n                    </\\2>               // the matching end tag\n                    [ \\t]*              // trailing spaces/tabs\n                    (?=\\n+)             // followed by a newline\n                )                       // attacklab: there are sentinel newlines at end of document\n            /gm,function(){...}};\n            */\n            text = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\\b[^\\r]*?\\n<\\/\\2>[ \\t]*(?=\\n+))/gm, hashElement);\n\n            //\n            // Now match more liberally, simply from `\\n<tag>` to `</tag>\\n`\n            //\n\n            /*\n            text = text.replace(/\n                (                       // save in $1\n                    ^                   // start of line  (with /m)\n                    <($block_tags_b)    // start tag = $2\n                    \\b                  // word break\n                                        // attacklab: hack around khtml/pcre bug...\n                    [^\\r]*?             // any number of lines, minimally matching\n                    .*</\\2>             // the matching end tag\n                    [ \\t]*              // trailing spaces/tabs\n                    (?=\\n+)             // followed by a newline\n                )                       // attacklab: there are sentinel newlines at end of document\n            /gm,function(){...}};\n            */\n            text = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math)\\b[^\\r]*?.*<\\/\\2>[ \\t]*(?=\\n+)\\n)/gm, hashElement);\n\n            // Special case just for <hr />. It was easier to make a special case than\n            // to make the other regex more complicated.  \n\n            /*\n            text = text.replace(/\n                \\n                  // Starting after a blank line\n                [ ]{0,3}\n                (                   // save in $1\n                    (<(hr)          // start tag = $2\n                        \\b          // word break\n                        ([^<>])*?\n                    \\/?>)           // the matching end tag\n                    [ \\t]*\n                    (?=\\n{2,})      // followed by a blank line\n                )\n            /g,hashElement);\n            */\n            text = text.replace(/\\n[ ]{0,3}((<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g, hashElement);\n\n            // Special case for standalone HTML comments:\n\n            /*\n            text = text.replace(/\n                \\n\\n                                            // Starting after a blank line\n                [ ]{0,3}                                        // attacklab: g_tab_width - 1\n                (                                               // save in $1\n                    <!\n                    (--(?:|(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)   // see http://www.w3.org/TR/html-markup/syntax.html#comments and http://meta.stackoverflow.com/q/95256\n                    >\n                    [ \\t]*\n                    (?=\\n{2,})                                  // followed by a blank line\n                )\n            /g,hashElement);\n            */\n            text = text.replace(/\\n\\n[ ]{0,3}(<!(--(?:|(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>[ \\t]*(?=\\n{2,}))/g, hashElement);\n\n            // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n\n            /*\n            text = text.replace(/\n                (?:\n                    \\n\\n            // Starting after a blank line\n                )\n                (                   // save in $1\n                    [ ]{0,3}        // attacklab: g_tab_width - 1\n                    (?:\n                        <([?%])     // $2\n                        [^\\r]*?\n                        \\2>\n                    )\n                    [ \\t]*\n                    (?=\\n{2,})      // followed by a blank line\n                )\n            /g,hashElement);\n            */\n            text = text.replace(/(?:\\n\\n)([ ]{0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g, hashElement);\n\n            return text;\n        }\n\n        function hashElement(wholeMatch, m1) {\n            var blockText = m1;\n\n            // Undo double lines\n            blockText = blockText.replace(/^\\n+/, \"\");\n\n            // strip trailing blank lines\n            blockText = blockText.replace(/\\n+$/g, \"\");\n\n            // Replace the element text with a marker (\"~KxK\" where x is its key)\n            blockText = \"\\n\\n~K\" + (g_html_blocks.push(blockText) - 1) + \"K\\n\\n\";\n\n            return blockText;\n        }\n        \n        var blockGamutHookCallback = function (t) { return _RunBlockGamut(t); }\n\n        function _RunBlockGamut(text, doNotUnhash) {\n            //\n            // These are all the transformations that form block-level\n            // tags like paragraphs, headers, and list items.\n            //\n            \n            text = pluginHooks.preBlockGamut(text, blockGamutHookCallback);\n            \n            text = _DoHeaders(text);\n\n            // Do Horizontal Rules:\n            var replacement = \"<hr />\\n\";\n            text = text.replace(/^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$/gm, replacement);\n            text = text.replace(/^[ ]{0,2}([ ]?-[ ]?){3,}[ \\t]*$/gm, replacement);\n            text = text.replace(/^[ ]{0,2}([ ]?_[ ]?){3,}[ \\t]*$/gm, replacement);\n\n            text = _DoLists(text);\n            text = _DoCodeBlocks(text);\n            text = _DoBlockQuotes(text);\n            \n            text = pluginHooks.postBlockGamut(text, blockGamutHookCallback);\n\n            // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n            // was to escape raw HTML in the original Markdown source. This time,\n            // we're escaping the markup we've just created, so that we don't wrap\n            // <p> tags around block-level tags.\n            text = _HashHTMLBlocks(text);\n            text = _FormParagraphs(text, doNotUnhash);\n\n            return text;\n        }\n\n        function _RunSpanGamut(text) {\n            //\n            // These are all the transformations that occur *within* block-level\n            // tags like paragraphs, headers, and list items.\n            //\n\n            text = pluginHooks.preSpanGamut(text);\n            \n            text = _DoCodeSpans(text);\n            text = _EscapeSpecialCharsWithinTagAttributes(text);\n            text = _EncodeBackslashEscapes(text);\n\n            // Process anchor and image tags. Images must come first,\n            // because ![foo][f] looks like an anchor.\n            text = _DoImages(text);\n            text = _DoAnchors(text);\n\n            // Make links out of things like `<http://example.com/>`\n            // Must come after _DoAnchors(), because you can use < and >\n            // delimiters in inline links like [this](<url>).\n            text = _DoAutoLinks(text);\n            \n            text = text.replace(/~P/g, \"://\"); // put in place to prevent autolinking; reset now\n            \n            text = _EncodeAmpsAndAngles(text);\n            text = _DoItalicsAndBold(text);\n\n            // Do hard breaks:\n            text = text.replace(/  +\\n/g, \" <br>\\n\");\n            \n            text = pluginHooks.postSpanGamut(text);\n\n            return text;\n        }\n\n        function _EscapeSpecialCharsWithinTagAttributes(text) {\n            //\n            // Within tags -- meaning between < and > -- encode [\\ ` * _] so they\n            // don't conflict with their use in Markdown for code, italics and strong.\n            //\n\n            // Build a regex to find HTML tags and comments.  See Friedl's \n            // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n\n            // SE: changed the comment part of the regex\n\n            var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--(?:|(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>)/gi;\n\n            text = text.replace(regex, function (wholeMatch) {\n                var tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g, \"$1`\");\n                tag = escapeCharacters(tag, wholeMatch.charAt(1) == \"!\" ? \"\\\\`*_/\" : \"\\\\`*_\"); // also escape slashes in comments to prevent autolinking there -- http://meta.stackoverflow.com/questions/95987\n                return tag;\n            });\n\n            return text;\n        }\n\n        function _DoAnchors(text) {\n            //\n            // Turn Markdown link shortcuts into XHTML <a> tags.\n            //\n            //\n            // First, handle reference-style links: [link text] [id]\n            //\n\n            /*\n            text = text.replace(/\n                (                           // wrap whole match in $1\n                    \\[\n                    (\n                        (?:\n                            \\[[^\\]]*\\]      // allow brackets nested one level\n                            |\n                            [^\\[]           // or anything else\n                        )*\n                    )\n                    \\]\n\n                    [ ]?                    // one optional space\n                    (?:\\n[ ]*)?             // one optional newline followed by spaces\n\n                    \\[\n                    (.*?)                   // id = $3\n                    \\]\n                )\n                ()()()()                    // pad remaining backreferences\n            /g, writeAnchorTag);\n            */\n            text = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g, writeAnchorTag);\n\n            //\n            // Next, inline-style links: [link text](url \"optional title\")\n            //\n\n            /*\n            text = text.replace(/\n                (                           // wrap whole match in $1\n                    \\[\n                    (\n                        (?:\n                            \\[[^\\]]*\\]      // allow brackets nested one level\n                            |\n                            [^\\[\\]]         // or anything else\n                        )*\n                    )\n                    \\]\n                    \\(                      // literal paren\n                    [ \\t]*\n                    ()                      // no id, so leave $3 empty\n                    <?(                     // href = $4\n                        (?:\n                            \\([^)]*\\)       // allow one level of (correctly nested) parens (think MSDN)\n                            |\n                            [^()\\s]\n                        )*?\n                    )>?                \n                    [ \\t]*\n                    (                       // $5\n                        (['\"])              // quote char = $6\n                        (.*?)               // Title = $7\n                        \\6                  // matching quote\n                        [ \\t]*              // ignore any spaces/tabs between closing quote and )\n                    )?                      // title is optional\n                    \\)\n                )\n            /g, writeAnchorTag);\n            */\n\n            text = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()<?((?:\\([^)]*\\)|[^()\\s])*?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g, writeAnchorTag);\n\n            //\n            // Last, handle reference-style shortcuts: [link text]\n            // These must come last in case you've also got [link test][1]\n            // or [link test](/foo)\n            //\n\n            /*\n            text = text.replace(/\n                (                   // wrap whole match in $1\n                    \\[\n                    ([^\\[\\]]+)      // link text = $2; can't contain '[' or ']'\n                    \\]\n                )\n                ()()()()()          // pad rest of backreferences\n            /g, writeAnchorTag);\n            */\n            text = text.replace(/(\\[([^\\[\\]]+)\\])()()()()()/g, writeAnchorTag);\n\n            return text;\n        }\n\n        function writeAnchorTag(wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n            if (m7 == undefined) m7 = \"\";\n            var whole_match = m1;\n            var link_text = m2.replace(/:\\/\\//g, \"~P\"); // to prevent auto-linking withing the link. will be converted back after the auto-linker runs\n            var link_id = m3.toLowerCase();\n            var url = m4;\n            var title = m7;\n\n            if (url == \"\") {\n                if (link_id == \"\") {\n                    // lower-case and turn embedded newlines into spaces\n                    link_id = link_text.toLowerCase().replace(/ ?\\n/g, \" \");\n                }\n                url = \"#\" + link_id;\n\n                if (g_urls.get(link_id) != undefined) {\n                    url = g_urls.get(link_id);\n                    if (g_titles.get(link_id) != undefined) {\n                        title = g_titles.get(link_id);\n                    }\n                }\n                else {\n                    if (whole_match.search(/\\(\\s*\\)$/m) > -1) {\n                        // Special case for explicit empty url\n                        url = \"\";\n                    } else {\n                        return whole_match;\n                    }\n                }\n            }\n            url = encodeProblemUrlChars(url);\n            url = escapeCharacters(url, \"*_\");\n            var result = \"<a href=\\\"\" + url + \"\\\"\";\n\n            if (title != \"\") {\n                title = attributeEncode(title);\n                title = escapeCharacters(title, \"*_\");\n                result += \" title=\\\"\" + title + \"\\\"\";\n            }\n\n            result += \">\" + link_text + \"</a>\";\n\n            return result;\n        }\n\n        function _DoImages(text) {\n            //\n            // Turn Markdown image shortcuts into <img> tags.\n            //\n\n            //\n            // First, handle reference-style labeled images: ![alt text][id]\n            //\n\n            /*\n            text = text.replace(/\n                (                   // wrap whole match in $1\n                    !\\[\n                    (.*?)           // alt text = $2\n                    \\]\n\n                    [ ]?            // one optional space\n                    (?:\\n[ ]*)?     // one optional newline followed by spaces\n\n                    \\[\n                    (.*?)           // id = $3\n                    \\]\n                )\n                ()()()()            // pad rest of backreferences\n            /g, writeImageTag);\n            */\n            text = text.replace(/(!\\[(.*?)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g, writeImageTag);\n\n            //\n            // Next, handle inline images:  ![alt text](url \"optional title\")\n            // Don't forget: encode * and _\n\n            /*\n            text = text.replace(/\n                (                   // wrap whole match in $1\n                    !\\[\n                    (.*?)           // alt text = $2\n                    \\]\n                    \\s?             // One optional whitespace character\n                    \\(              // literal paren\n                    [ \\t]*\n                    ()              // no id, so leave $3 empty\n                    <?(\\S+?)>?      // src url = $4\n                    [ \\t]*\n                    (               // $5\n                        (['\"])      // quote char = $6\n                        (.*?)       // title = $7\n                        \\6          // matching quote\n                        [ \\t]*\n                    )?              // title is optional\n                    \\)\n                )\n            /g, writeImageTag);\n            */\n            text = text.replace(/(!\\[(.*?)\\]\\s?\\([ \\t]*()<?(\\S+?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g, writeImageTag);\n\n            return text;\n        }\n        \n        function attributeEncode(text) {\n            // unconditionally replace angle brackets here -- what ends up in an attribute (e.g. alt or title)\n            // never makes sense to have verbatim HTML in it (and the sanitizer would totally break it)\n            return text.replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\");\n        }\n\n        function writeImageTag(wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n            var whole_match = m1;\n            var alt_text = m2;\n            var link_id = m3.toLowerCase();\n            var url = m4;\n            var title = m7;\n\n            if (!title) title = \"\";\n\n            if (url == \"\") {\n                if (link_id == \"\") {\n                    // lower-case and turn embedded newlines into spaces\n                    link_id = alt_text.toLowerCase().replace(/ ?\\n/g, \" \");\n                }\n                url = \"#\" + link_id;\n\n                if (g_urls.get(link_id) != undefined) {\n                    url = g_urls.get(link_id);\n                    if (g_titles.get(link_id) != undefined) {\n                        title = g_titles.get(link_id);\n                    }\n                }\n                else {\n                    return whole_match;\n                }\n            }\n            \n            alt_text = escapeCharacters(attributeEncode(alt_text), \"*_[]()\");\n            url = escapeCharacters(url, \"*_\");\n            var result = \"<img src=\\\"\" + url + \"\\\" alt=\\\"\" + alt_text + \"\\\"\";\n\n            // attacklab: Markdown.pl adds empty title attributes to images.\n            // Replicate this bug.\n\n            //if (title != \"\") {\n            title = attributeEncode(title);\n            title = escapeCharacters(title, \"*_\");\n            result += \" title=\\\"\" + title + \"\\\"\";\n            //}\n\n            result += \" />\";\n\n            return result;\n        }\n\n        function _DoHeaders(text) {\n\n            // Setext-style headers:\n            //  Header 1\n            //  ========\n            //  \n            //  Header 2\n            //  --------\n            //\n            text = text.replace(/^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n                function (wholeMatch, m1) { return \"<h1>\" + _RunSpanGamut(m1) + \"</h1>\\n\\n\"; }\n            );\n\n            text = text.replace(/^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm,\n                function (matchFound, m1) { return \"<h2>\" + _RunSpanGamut(m1) + \"</h2>\\n\\n\"; }\n            );\n\n            // atx-style headers:\n            //  # Header 1\n            //  ## Header 2\n            //  ## Header 2 with closing hashes ##\n            //  ...\n            //  ###### Header 6\n            //\n\n            /*\n            text = text.replace(/\n                ^(\\#{1,6})      // $1 = string of #'s\n                [ \\t]*\n                (.+?)           // $2 = Header text\n                [ \\t]*\n                \\#*             // optional closing #'s (not counted)\n                \\n+\n            /gm, function() {...});\n            */\n\n            text = text.replace(/^(\\#{1,6})[ \\t]*(.+?)[ \\t]*\\#*\\n+/gm,\n                function (wholeMatch, m1, m2) {\n                    var h_level = m1.length;\n                    return \"<h\" + h_level + \">\" + _RunSpanGamut(m2) + \"</h\" + h_level + \">\\n\\n\";\n                }\n            );\n\n            return text;\n        }\n\n        function _DoLists(text, isInsideParagraphlessListItem) {\n            //\n            // Form HTML ordered (numbered) and unordered (bulleted) lists.\n            //\n\n            // attacklab: add sentinel to hack around khtml/safari bug:\n            // http://bugs.webkit.org/show_bug.cgi?id=11231\n            text += \"~0\";\n\n            // Re-usable pattern to match any entirel ul or ol list:\n\n            /*\n            var whole_list = /\n                (                                   // $1 = whole list\n                    (                               // $2\n                        [ ]{0,3}                    // attacklab: g_tab_width - 1\n                        ([*+-]|\\d+[.])              // $3 = first list item marker\n                        [ \\t]+\n                    )\n                    [^\\r]+?\n                    (                               // $4\n                        ~0                          // sentinel for workaround; should be $\n                        |\n                        \\n{2,}\n                        (?=\\S)\n                        (?!                         // Negative lookahead for another list item marker\n                            [ \\t]*\n                            (?:[*+-]|\\d+[.])[ \\t]+\n                        )\n                    )\n                )\n            /g\n            */\n            var whole_list = /^(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm;\n\n            if (g_list_level) {\n                text = text.replace(whole_list, function (wholeMatch, m1, m2) {\n                    var list = m1;\n                    var list_type = (m2.search(/[*+-]/g) > -1) ? \"ul\" : \"ol\";\n\n                    var result = _ProcessListItems(list, list_type, isInsideParagraphlessListItem);\n\n                    // Trim any trailing whitespace, to put the closing `</$list_type>`\n                    // up on the preceding line, to get it past the current stupid\n                    // HTML block parser. This is a hack to work around the terrible\n                    // hack that is the HTML block parser.\n                    result = result.replace(/\\s+$/, \"\");\n                    result = \"<\" + list_type + \">\" + result + \"</\" + list_type + \">\\n\";\n                    return result;\n                });\n            } else {\n                whole_list = /(\\n\\n|^\\n?)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/g;\n                text = text.replace(whole_list, function (wholeMatch, m1, m2, m3) {\n                    var runup = m1;\n                    var list = m2;\n\n                    var list_type = (m3.search(/[*+-]/g) > -1) ? \"ul\" : \"ol\";\n                    var result = _ProcessListItems(list, list_type);\n                    result = runup + \"<\" + list_type + \">\\n\" + result + \"</\" + list_type + \">\\n\";\n                    return result;\n                });\n            }\n\n            // attacklab: strip sentinel\n            text = text.replace(/~0/, \"\");\n\n            return text;\n        }\n\n        var _listItemMarkers = { ol: \"\\\\d+[.]\", ul: \"[*+-]\" };\n\n        function _ProcessListItems(list_str, list_type, isInsideParagraphlessListItem) {\n            //\n            //  Process the contents of a single ordered or unordered list, splitting it\n            //  into individual list items.\n            //\n            //  list_type is either \"ul\" or \"ol\".\n\n            // The $g_list_level global keeps track of when we're inside a list.\n            // Each time we enter a list, we increment it; when we leave a list,\n            // we decrement. If it's zero, we're not in a list anymore.\n            //\n            // We do this because when we're not inside a list, we want to treat\n            // something like this:\n            //\n            //    I recommend upgrading to version\n            //    8. Oops, now this line is treated\n            //    as a sub-list.\n            //\n            // As a single paragraph, despite the fact that the second line starts\n            // with a digit-period-space sequence.\n            //\n            // Whereas when we're inside a list (or sub-list), that line will be\n            // treated as the start of a sub-list. What a kludge, huh? This is\n            // an aspect of Markdown's syntax that's hard to parse perfectly\n            // without resorting to mind-reading. Perhaps the solution is to\n            // change the syntax rules such that sub-lists must start with a\n            // starting cardinal number; e.g. \"1.\" or \"a.\".\n\n            g_list_level++;\n\n            // trim trailing blank lines:\n            list_str = list_str.replace(/\\n{2,}$/, \"\\n\");\n\n            // attacklab: add sentinel to emulate \\z\n            list_str += \"~0\";\n\n            // In the original attacklab showdown, list_type was not given to this function, and anything\n            // that matched /[*+-]|\\d+[.]/ would just create the next <li>, causing this mismatch:\n            //\n            //  Markdown          rendered by WMD        rendered by MarkdownSharp\n            //  ------------------------------------------------------------------\n            //  1. first          1. first               1. first\n            //  2. second         2. second              2. second\n            //  - third           3. third                   * third\n            //\n            // We changed this to behave identical to MarkdownSharp. This is the constructed RegEx,\n            // with {MARKER} being one of \\d+[.] or [*+-], depending on list_type:\n        \n            /*\n            list_str = list_str.replace(/\n                (^[ \\t]*)                       // leading whitespace = $1\n                ({MARKER}) [ \\t]+               // list marker = $2\n                ([^\\r]+?                        // list item text   = $3\n                    (\\n+)\n                )\n                (?=\n                    (~0 | \\2 ({MARKER}) [ \\t]+)\n                )\n            /gm, function(){...});\n            */\n\n            var marker = _listItemMarkers[list_type];\n            var re = new RegExp(\"(^[ \\\\t]*)(\" + marker + \")[ \\\\t]+([^\\\\r]+?(\\\\n+))(?=(~0|\\\\1(\" + marker + \")[ \\\\t]+))\", \"gm\");\n            var last_item_had_a_double_newline = false;\n            list_str = list_str.replace(re,\n                function (wholeMatch, m1, m2, m3) {\n                    var item = m3;\n                    var leading_space = m1;\n                    var ends_with_double_newline = /\\n\\n$/.test(item);\n                    var contains_double_newline = ends_with_double_newline || item.search(/\\n{2,}/) > -1;\n\n                    if (contains_double_newline || last_item_had_a_double_newline) {\n                        item = _RunBlockGamut(_Outdent(item), /* doNotUnhash = */true);\n                    }\n                    else {\n                        // Recursion for sub-lists:\n                        item = _DoLists(_Outdent(item), /* isInsideParagraphlessListItem= */ true);\n                        item = item.replace(/\\n$/, \"\"); // chomp(item)\n                        if (!isInsideParagraphlessListItem) // only the outer-most item should run this, otherwise it's run multiple times for the inner ones\n                            item = _RunSpanGamut(item);\n                    }\n                    last_item_had_a_double_newline = ends_with_double_newline;\n                    return \"<li>\" + item + \"</li>\\n\";\n                }\n            );\n\n            // attacklab: strip sentinel\n            list_str = list_str.replace(/~0/g, \"\");\n\n            g_list_level--;\n            return list_str;\n        }\n\n        function _DoCodeBlocks(text) {\n            //\n            //  Process Markdown `<pre><code>` blocks.\n            //  \n\n            /*\n            text = text.replace(/\n                (?:\\n\\n|^)\n                (                               // $1 = the code block -- one or more lines, starting with a space/tab\n                    (?:\n                        (?:[ ]{4}|\\t)           // Lines must start with a tab or a tab-width of spaces - attacklab: g_tab_width\n                        .*\\n+\n                    )+\n                )\n                (\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))    // attacklab: g_tab_width\n            /g ,function(){...});\n            */\n\n            // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n            text += \"~0\";\n\n            text = text.replace(/(?:\\n\\n|^\\n?)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g,\n                function (wholeMatch, m1, m2) {\n                    var codeblock = m1;\n                    var nextChar = m2;\n\n                    codeblock = _EncodeCode(_Outdent(codeblock));\n                    codeblock = _Detab(codeblock);\n                    codeblock = codeblock.replace(/^\\n+/g, \"\"); // trim leading newlines\n                    codeblock = codeblock.replace(/\\n+$/g, \"\"); // trim trailing whitespace\n\n                    codeblock = \"<pre><code>\" + codeblock + \"\\n</code></pre>\";\n\n                    return \"\\n\\n\" + codeblock + \"\\n\\n\" + nextChar;\n                }\n            );\n\n            // attacklab: strip sentinel\n            text = text.replace(/~0/, \"\");\n\n            return text;\n        }\n\n        function hashBlock(text) {\n            text = text.replace(/(^\\n+|\\n+$)/g, \"\");\n            return \"\\n\\n~K\" + (g_html_blocks.push(text) - 1) + \"K\\n\\n\";\n        }\n\n        function _DoCodeSpans(text) {\n            //\n            // * Backtick quotes are used for <code></code> spans.\n            // \n            // * You can use multiple backticks as the delimiters if you want to\n            //   include literal backticks in the code span. So, this input:\n            //     \n            //      Just type ``foo `bar` baz`` at the prompt.\n            //     \n            //   Will translate to:\n            //     \n            //      <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n            //     \n            //   There's no arbitrary limit to the number of backticks you\n            //   can use as delimters. If you need three consecutive backticks\n            //   in your code, use four for delimiters, etc.\n            //\n            // * You can use spaces to get literal backticks at the edges:\n            //     \n            //      ... type `` `bar` `` ...\n            //     \n            //   Turns to:\n            //     \n            //      ... type <code>`bar`</code> ...\n            //\n\n            /*\n            text = text.replace(/\n                (^|[^\\\\])       // Character before opening ` can't be a backslash\n                (`+)            // $2 = Opening run of `\n                (               // $3 = The code block\n                    [^\\r]*?\n                    [^`]        // attacklab: work around lack of lookbehind\n                )\n                \\2              // Matching closer\n                (?!`)\n            /gm, function(){...});\n            */\n\n            text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n                function (wholeMatch, m1, m2, m3, m4) {\n                    var c = m3;\n                    c = c.replace(/^([ \\t]*)/g, \"\"); // leading whitespace\n                    c = c.replace(/[ \\t]*$/g, \"\"); // trailing whitespace\n                    c = _EncodeCode(c);\n                    c = c.replace(/:\\/\\//g, \"~P\"); // to prevent auto-linking. Not necessary in code *blocks*, but in code spans. Will be converted back after the auto-linker runs.\n                    return m1 + \"<code>\" + c + \"</code>\";\n                }\n            );\n\n            return text;\n        }\n\n        function _EncodeCode(text) {\n            //\n            // Encode/escape certain characters inside Markdown code runs.\n            // The point is that in code, these characters are literals,\n            // and lose their special Markdown meanings.\n            //\n            // Encode all ampersands; HTML entities are not\n            // entities within a Markdown code span.\n            text = text.replace(/&/g, \"&amp;\");\n\n            // Do the angle bracket song and dance:\n            text = text.replace(/</g, \"&lt;\");\n            text = text.replace(/>/g, \"&gt;\");\n\n            // Now, escape characters that are magic in Markdown:\n            text = escapeCharacters(text, \"\\*_{}[]\\\\\", false);\n\n            // jj the line above breaks this:\n            //---\n\n            //* Item\n\n            //   1. Subitem\n\n            //            special char: *\n            //---\n\n            return text;\n        }\n\n        function _DoItalicsAndBold(text) {\n\n            // <strong> must go first:\n            text = text.replace(/([\\W_]|^)(\\*\\*|__)(?=\\S)([^\\r]*?\\S[\\*_]*)\\2([\\W_]|$)/g,\n            \"$1<strong>$3</strong>$4\");\n\n            text = text.replace(/([\\W_]|^)(\\*|_)(?=\\S)([^\\r\\*_]*?\\S)\\2([\\W_]|$)/g,\n            \"$1<em>$3</em>$4\");\n\n            return text;\n        }\n\n        function _DoBlockQuotes(text) {\n\n            /*\n            text = text.replace(/\n                (                           // Wrap whole match in $1\n                    (\n                        ^[ \\t]*>[ \\t]?      // '>' at the start of a line\n                        .+\\n                // rest of the first line\n                        (.+\\n)*             // subsequent consecutive lines\n                        \\n*                 // blanks\n                    )+\n                )\n            /gm, function(){...});\n            */\n\n            text = text.replace(/((^[ \\t]*>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm,\n                function (wholeMatch, m1) {\n                    var bq = m1;\n\n                    // attacklab: hack around Konqueror 3.5.4 bug:\n                    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n                    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, \"~0\"); // trim one level of quoting\n\n                    // attacklab: clean up hack\n                    bq = bq.replace(/~0/g, \"\");\n\n                    bq = bq.replace(/^[ \\t]+$/gm, \"\");     // trim whitespace-only lines\n                    bq = _RunBlockGamut(bq);             // recurse\n\n                    bq = bq.replace(/(^|\\n)/g, \"$1  \");\n                    // These leading spaces screw with <pre> content, so we need to fix that:\n                    bq = bq.replace(\n                            /(\\s*<pre>[^\\r]+?<\\/pre>)/gm,\n                        function (wholeMatch, m1) {\n                            var pre = m1;\n                            // attacklab: hack around Konqueror 3.5.4 bug:\n                            pre = pre.replace(/^  /mg, \"~0\");\n                            pre = pre.replace(/~0/g, \"\");\n                            return pre;\n                        });\n\n                    return hashBlock(\"<blockquote>\\n\" + bq + \"\\n</blockquote>\");\n                }\n            );\n            return text;\n        }\n\n        function _FormParagraphs(text, doNotUnhash) {\n            //\n            //  Params:\n            //    $text - string to process with html <p> tags\n            //\n\n            // Strip leading and trailing lines:\n            text = text.replace(/^\\n+/g, \"\");\n            text = text.replace(/\\n+$/g, \"\");\n\n            var grafs = text.split(/\\n{2,}/g);\n            var grafsOut = [];\n            \n            var markerRe = /~K(\\d+)K/;\n\n            //\n            // Wrap <p> tags.\n            //\n            var end = grafs.length;\n            for (var i = 0; i < end; i++) {\n                var str = grafs[i];\n\n                // if this is an HTML marker, copy it\n                if (markerRe.test(str)) {\n                    grafsOut.push(str);\n                }\n                else if (/\\S/.test(str)) {\n                    str = _RunSpanGamut(str);\n                    str = str.replace(/^([ \\t]*)/g, \"<p>\");\n                    str += \"</p>\"\n                    grafsOut.push(str);\n                }\n\n            }\n            //\n            // Unhashify HTML blocks\n            //\n            if (!doNotUnhash) {\n                end = grafsOut.length;\n                for (var i = 0; i < end; i++) {\n                    var foundAny = true;\n                    while (foundAny) { // we may need several runs, since the data may be nested\n                        foundAny = false;\n                        grafsOut[i] = grafsOut[i].replace(/~K(\\d+)K/g, function (wholeMatch, id) {\n                            foundAny = true;\n                            return g_html_blocks[id];\n                        });\n                    }\n                }\n            }\n            return grafsOut.join(\"\\n\\n\");\n        }\n\n        function _EncodeAmpsAndAngles(text) {\n            // Smart processing for ampersands and angle brackets that need to be encoded.\n\n            // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n            //   http://bumppo.net/projects/amputator/\n            text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, \"&amp;\");\n\n            // Encode naked <'s\n            text = text.replace(/<(?![a-z\\/?!]|~D)/gi, \"&lt;\");\n\n            return text;\n        }\n\n        function _EncodeBackslashEscapes(text) {\n            //\n            //   Parameter:  String.\n            //   Returns:    The string, with after processing the following backslash\n            //               escape sequences.\n            //\n\n            // attacklab: The polite way to do this is with the new\n            // escapeCharacters() function:\n            //\n            //     text = escapeCharacters(text,\"\\\\\",true);\n            //     text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n            //\n            // ...but we're sidestepping its use of the (slow) RegExp constructor\n            // as an optimization for Firefox.  This function gets called a LOT.\n\n            text = text.replace(/\\\\(\\\\)/g, escapeCharacters_callback);\n            text = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g, escapeCharacters_callback);\n            return text;\n        }\n\n        var charInsideUrl = \"[-A-Z0-9+&@#/%?=~_|[\\\\]()!:,.;]\",\n            charEndingUrl = \"[-A-Z0-9+&@#/%=~_|[\\\\])]\",\n            autoLinkRegex = new RegExp(\"(=\\\"|<)?\\\\b(https?|ftp)(://\" + charInsideUrl + \"*\" + charEndingUrl + \")(?=$|\\\\W)\", \"gi\"),\n            endCharRegex = new RegExp(charEndingUrl, \"i\");\n\n        function handleTrailingParens(wholeMatch, lookbehind, protocol, link) {\n            if (lookbehind)\n                return wholeMatch;\n            if (link.charAt(link.length - 1) !== \")\")\n                return \"<\" + protocol + link + \">\";\n            var parens = link.match(/[()]/g);\n            var level = 0;\n            for (var i = 0; i < parens.length; i++) {\n                if (parens[i] === \"(\") {\n                    if (level <= 0)\n                        level = 1;\n                    else\n                        level++;\n                }\n                else {\n                    level--;\n                }\n            }\n            var tail = \"\";\n            if (level < 0) {\n                var re = new RegExp(\"\\\\){1,\" + (-level) + \"}$\");\n                link = link.replace(re, function (trailingParens) {\n                    tail = trailingParens;\n                    return \"\";\n                });\n            }\n            if (tail) {\n                var lastChar = link.charAt(link.length - 1);\n                if (!endCharRegex.test(lastChar)) {\n                    tail = lastChar + tail;\n                    link = link.substr(0, link.length - 1);\n                }\n            }\n            return \"<\" + protocol + link + \">\" + tail;\n        }\n        \n        function _DoAutoLinks(text) {\n\n            // note that at this point, all other URL in the text are already hyperlinked as <a href=\"\"></a>\n            // *except* for the <http://www.foo.com> case\n\n            // automatically add < and > around unadorned raw hyperlinks\n            // must be preceded by a non-word character (and not by =\" or <) and followed by non-word/EOF character\n            // simulating the lookbehind in a consuming way is okay here, since a URL can neither and with a \" nor\n            // with a <, so there is no risk of overlapping matches.\n            text = text.replace(autoLinkRegex, handleTrailingParens);\n\n            //  autolink anything like <http://example.com>\n            \n            var replacer = function (wholematch, m1) { return \"<a href=\\\"\" + m1 + \"\\\">\" + pluginHooks.plainLinkText(m1) + \"</a>\"; }\n            text = text.replace(/<((https?|ftp):[^'\">\\s]+)>/gi, replacer);\n\n            // Email addresses: <address@domain.foo>\n            /*\n            text = text.replace(/\n                <\n                (?:mailto:)?\n                (\n                    [-.\\w]+\n                    \\@\n                    [-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+\n                )\n                >\n            /gi, _DoAutoLinks_callback());\n            */\n\n            /* disabling email autolinking, since we don't do that on the server, either\n            text = text.replace(/<(?:mailto:)?([-.\\w]+\\@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n                function(wholeMatch,m1) {\n                    return _EncodeEmailAddress( _UnescapeSpecialChars(m1) );\n                }\n            );\n            */\n            return text;\n        }\n\n        function _UnescapeSpecialChars(text) {\n            //\n            // Swap back in all the special characters we've hidden.\n            //\n            text = text.replace(/~E(\\d+)E/g,\n                function (wholeMatch, m1) {\n                    var charCodeToReplace = parseInt(m1);\n                    return String.fromCharCode(charCodeToReplace);\n                }\n            );\n            return text;\n        }\n\n        function _Outdent(text) {\n            //\n            // Remove one level of line-leading tabs or spaces\n            //\n\n            // attacklab: hack around Konqueror 3.5.4 bug:\n            // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n\n            text = text.replace(/^(\\t|[ ]{1,4})/gm, \"~0\"); // attacklab: g_tab_width\n\n            // attacklab: clean up hack\n            text = text.replace(/~0/g, \"\")\n\n            return text;\n        }\n\n        function _Detab(text) {\n            if (!/\\t/.test(text))\n                return text;\n\n            var spaces = [\"    \", \"   \", \"  \", \" \"],\n            skew = 0,\n            v;\n\n            return text.replace(/[\\n\\t]/g, function (match, offset) {\n                if (match === \"\\n\") {\n                    skew = offset + 1;\n                    return match;\n                }\n                v = (offset - skew) % 4;\n                skew = offset + 1;\n                return spaces[v];\n            });\n        }\n\n        //\n        //  attacklab: Utility functions\n        //\n\n        var _problemUrlChars = /(?:[\"'*()[\\]:]|~D)/g;\n\n        // hex-encodes some unusual \"problem\" chars in URLs to avoid URL detection problems \n        function encodeProblemUrlChars(url) {\n            if (!url)\n                return \"\";\n\n            var len = url.length;\n\n            return url.replace(_problemUrlChars, function (match, offset) {\n                if (match == \"~D\") // escape for dollar\n                    return \"%24\";\n                if (match == \":\") {\n                    if (offset == len - 1 || /[0-9\\/]/.test(url.charAt(offset + 1)))\n                        return \":\"\n                }\n                return \"%\" + match.charCodeAt(0).toString(16);\n            });\n        }\n\n\n        function escapeCharacters(text, charsToEscape, afterBackslash) {\n            // First we have to escape the escape characters so that\n            // we can build a character class out of them\n            var regexString = \"([\" + charsToEscape.replace(/([\\[\\]\\\\])/g, \"\\\\$1\") + \"])\";\n\n            if (afterBackslash) {\n                regexString = \"\\\\\\\\\" + regexString;\n            }\n\n            var regex = new RegExp(regexString, \"g\");\n            text = text.replace(regex, escapeCharacters_callback);\n\n            return text;\n        }\n\n\n        function escapeCharacters_callback(wholeMatch, m1) {\n            var charCodeToEscape = m1.charCodeAt(0);\n            return \"~E\" + charCodeToEscape + \"E\";\n        }\n\n    }; // end of the Markdown.Converter constructor\n\n})();\n"]}