{"version":3,"sources":["../../src/sandbox/sandbox.js"],"names":["require","id","waitingForReply","global","sandboxRequest","module","call","args","Promise","resolve","reject","process","send","command","on","message","exec","apiResponse","data","p","replyTo","undefined","err","result","url","fn","configDir","then","catch","console","error","toString"],"mappings":"AAAA;;AAEAA,QAAQ,mBAAR;;AAEA,IAAIC,KAAK,CAAT;AACA,IAAIC,kBAAkB,EAAtB;;AAEAC,OAAOC,cAAP,GAAwB,UAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AACjD,WAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzCT;AACAC,wBAAgBD,EAAhB,IAAsB;AAClBQ,qBAASA,OADS;AAElBC,oBAAQA;AAFU,SAAtB;AAIAC,gBAAQC,IAAR,CAAa;AACTC,qBAAS,aADA;AAETZ,gBAAIA,EAFK;AAGTI,oBAAQA,MAHC;AAITC,kBAAMA,IAJG;AAKTC,kBAAMA;AALG,SAAb;AAOH,KAbM,CAAP;AAcH,CAfD;;AAiBAI,QAAQG,EAAR,CAAW,SAAX,EAAsBC,WAAW;AAC7B,QAAIA,QAAQF,OAAR,KAAoB,MAAxB,EAAgC;AAC5BG,aAAKD,OAAL;AACH,KAFD,MAEO,IAAIA,QAAQF,OAAR,KAAoB,cAAxB,EAAwC;AAC3CI,oBAAYF,OAAZ;AACH;AACJ,CAND;;AAQA,SAASE,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAIC,IAAIjB,gBAAgBgB,KAAKE,OAArB,CAAR;;AAEA,QAAIC,cAAcH,KAAKI,GAAnB,IAA0B,SAASJ,KAAKI,GAA5C,EAAiD;AAC7CH,UAAET,MAAF,CAASQ,KAAKI,GAAd;AACH,KAFD,MAEO;AACHH,UAAEV,OAAF,CAAUS,KAAKK,MAAf;AACH;AACD,WAAOrB,gBAAgBgB,KAAKE,OAArB,CAAP;AACH;;AAED,eAAeJ,IAAf,CAAoBE,IAApB,EAA0B;AACtB,UAAMjB,KAAKiB,KAAKjB,EAAhB;AACA,UAAMuB,MAAMN,KAAKM,GAAjB;;AAEA,QAAI,CAACA,GAAL,EAAU;AACN;AACH;;AAED,QAAIC,EAAJ;;AAEA,QAAI;AACAA,aAAKzB,QAAQkB,KAAKQ,SAAL,GAAiBF,GAAzB,CAAL;AACH,KAFD,CAEE,OAAOF,GAAP,EAAY;AACVG,aAAKzB,QAAQ,cAAcwB,GAAtB,CAAL;AACH;;AAED,QAAIN,KAAKO,EAAT,EAAa;AACTA,aAAKA,GAAGP,KAAKO,EAAR,CAAL;AACH;;AAEDjB,YAAQC,OAAR,CAAgBS,KAAKA,IAArB,EAA2BS,IAA3B,CAAgCF,EAAhC,EAAoCE,IAApC,CAAyCJ,UAAU;AAC/C,YAAIR,UAAU;AACVF,qBAAS,SADC;AAEVO,qBAASnB,EAFC;AAGVsB,oBAAQA;AAHE,SAAd;AAKAZ,gBAAQC,IAAR,CAAaG,OAAb;AACH,KAPD,EAOGa,KAPH,CAOSN,OAAO;AACZO,gBAAQC,KAAR,CAAcR,GAAd;AACA,YAAIP,UAAU;AACVF,qBAAS,SADC;AAEVO,qBAASnB,EAFC;AAGVqB,iBAAKA,IAAIS,QAAJ;AAHK,SAAd;AAKApB,gBAAQC,IAAR,CAAaG,OAAb;AACH,KAfD;AAgBH","file":"sandbox.js","sourcesContent":["'use strict';\n\nrequire('../config/api/zed');\n\nvar id = 0;\nvar waitingForReply = {};\n\nglobal.sandboxRequest = function(module, call, args) {\n    return new Promise(function(resolve, reject) {\n        id++;\n        waitingForReply[id] = {\n            resolve: resolve,\n            reject: reject\n        };\n        process.send({\n            command: 'api-request',\n            id: id,\n            module: module,\n            call: call,\n            args: args\n        });\n    });\n};\n\nprocess.on('message', message => {\n    if (message.command === 'exec') {\n        exec(message);\n    } else if (message.command === 'api-response') {\n        apiResponse(message);\n    }\n});\n\nfunction apiResponse(data) {\n    var p = waitingForReply[data.replyTo];\n\n    if (undefined !== data.err && null !== data.err) {\n        p.reject(data.err);\n    } else {\n        p.resolve(data.result);\n    }\n    delete waitingForReply[data.replyTo];\n}\n\nasync function exec(data) {\n    const id = data.id;\n    const url = data.url;\n    \n    if (!url) {\n        return;\n    }\n\n    let fn;\n    \n    try {\n        fn = require(data.configDir + url);\n    } catch (err) {\n        fn = require('../config' + url);\n    }\n    \n    if (data.fn) {\n        fn = fn[data.fn];\n    }\n    \n    Promise.resolve(data.data).then(fn).then(result => {\n        var message = {\n            command: 'results',\n            replyTo: id,\n            result: result\n        };\n        process.send(message);\n    }).catch(err => {\n        console.error(err);\n        var message = {\n            command: 'results',\n            replyTo: id,\n            err: err.toString()\n        };\n        process.send(message);\n    });\n}"]}