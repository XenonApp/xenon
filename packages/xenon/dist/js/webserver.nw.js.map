{"version":3,"sources":["../../src/js/webserver.nw.js"],"names":["module","exports","express","require","bodyParser","http","HttpServer","host","port","requestHandler","app","use","text","defaultCharset","all","req","res","oldSend","send","data","buf","Buffer","call","prototype","start","server","Promise","resolve","reject","console","log","$server","createServer","on","err","listen","stop","close"],"mappings":";;AAAA;;;AAGAA,OAAOC,OAAP,GAAiB,YAAW;AACxB,QAAIC,UAAUC,QAAQ,SAAR,CAAd;AACA,QAAIC,aAAaD,QAAQ,aAAR,CAAjB;AACA,QAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA,aAASG,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,cAAhC,EAAgD;AAC5C,aAAKF,IAAL,GAAYA,IAAZ;AACA,aAAKC,IAAL,GAAYA,IAAZ;;AAEA,aAAKE,GAAL,GAAWR,SAAX;AACA,aAAKQ,GAAL,CAASC,GAAT,CAAaP,WAAWQ,IAAX,CAAgB;AACzBC,4BAAgB;AADS,SAAhB,CAAb;AAGA,aAAKH,GAAL,CAASI,GAAT,CAAa,GAAb,EAAkB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACjC,gBAAIC,UAAUD,IAAIE,IAAlB;AACAF,gBAAIE,IAAJ,GAAW,UAASC,IAAT,EAAe;AACtB,oBAAIC,MAAM,IAAIC,MAAJ,CAAWF,IAAX,EAAiB,QAAjB,CAAV;AACAF,wBAAQK,IAAR,CAAaN,GAAb,EAAkBI,GAAlB;AACH,aAHD;AAIAX,2BAAeM,GAAf,EAAoBC,GAApB;AACH,SAPD;AAQH;;AAEDV,eAAWiB,SAAX,GAAuB;AACnBC,eAAO,YAAW;AACd,gBAAIC,SAAS,IAAb;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzCC,wBAAQC,GAAR,CAAY,2BAAZ;AACAL,uBAAOM,OAAP,GAAiB1B,KAAK2B,YAAL,CAAkBP,OAAOf,GAAzB,CAAjB;AACAe,uBAAOM,OAAP,CAAeE,EAAf,CAAkB,OAAlB,EAA2B,UAASC,GAAT,EAAc;AACrCN,2BAAOM,GAAP;AACH,iBAFD;AAGAT,uBAAOM,OAAP,CAAeI,MAAf,CAAsBV,OAAOjB,IAA7B,EAAmCiB,OAAOlB,IAA1C,EAAgD,YAAW;AACvDoB;AACH,iBAFD;AAGH,aATM,CAAP;AAUH,SAbkB;AAcnBS,cAAM,YAAW;AACb,gBAAI,KAAKL,OAAT,EAAkB;AACd,qBAAKA,OAAL,CAAaM,KAAb;AACA,qBAAKN,OAAL,GAAe,IAAf;AACH;AACJ;AAnBkB,KAAvB;;AAsBA,WAAO;AACHzB,oBAAYA;AADT,KAAP;AAGH,CAhDD","file":"webserver.nw.js","sourcesContent":["/**\n * Implements a web server in node-webkit\n */\nmodule.exports = function() {\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var http = require(\"http\");\n\n    function HttpServer(host, port, requestHandler) {\n        this.host = host;\n        this.port = port;\n\n        this.app = express();\n        this.app.use(bodyParser.text({\n            defaultCharset: \"binary\"\n        }));\n        this.app.all('*', function(req, res) {\n            var oldSend = res.send;\n            res.send = function(data) {\n                var buf = new Buffer(data, 'binary');\n                oldSend.call(res, buf);\n            };\n            requestHandler(req, res);\n        });\n    }\n\n    HttpServer.prototype = {\n        start: function() {\n            var server = this;\n            return new Promise(function(resolve, reject) {\n                console.log(\"Going to start server now\");\n                server.$server = http.createServer(server.app);\n                server.$server.on('error', function(err) {\n                    reject(err);\n                });\n                server.$server.listen(server.port, server.host, function() {\n                    resolve();\n                });\n            });\n        },\n        stop: function() {\n            if (this.$server) {\n                this.$server.close();\n                this.$server = null;\n            }\n        },\n    };\n\n    return {\n        HttpServer: HttpServer\n    };\n};\n"]}