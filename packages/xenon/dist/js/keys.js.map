{"version":3,"sources":["../../src/js/keys.js"],"names":["eventbus","require","lang","global","ace","CommandManager","useragent","keys","api","hook","on","updateAllEditors","config","getKeys","edit","session","mode","_","extend","updateEditor","getCommandKeys","editor","getEditors","forEach","commands","loadCommands","getSession","isMac","$mergeableCommands","$historyTracker","bind","$initOperationListeners","keyBinding","setDefaultHandler","getKeyboardHandler","bindCommand","cmd","bindKey","command","c","lookup","push","name","exec","args","multiSelectAction","readOnly","scrollIntoView","undefined","range","getSelectionRange","_emit","selection","isEmpty","remove","clearSelection","$handlePaste","str","insert","stringRepeat","text","times","each","module","exports"],"mappings":"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","file":"keys.js","sourcesContent":["\"use strict\";\n/**\n * This module implements all key handing within the editor, overriding ACE's\n * own key handlers.\n */\nconst eventbus = require('./eventbus');\n\nvar lang = global.ace.require(\"ace/lib/lang\");\nvar CommandManager = global.ace.require(\"ace/commands/command_manager\").CommandManager;\nvar useragent = global.ace.require(\"ace/lib/useragent\");\n\n\nvar keys = require(\"../config/default/keys.json\");\n\nvar api = {\n    hook: function() {\n        eventbus.on(\"commandsloaded\", function() {\n            updateAllEditors();\n        });\n        eventbus.on(\"configchanged\", function(config) {\n            keys = config.getKeys();\n            updateAllEditors();\n        });\n        eventbus.on(\"switchsession\", function(edit, session) {\n            var mode = session.mode;\n            if (!mode) {\n                return;\n            }\n\n            keys = _.extend({}, require(\"./config\").getKeys(), mode.keys);\n            updateEditor(edit);\n        });\n    },\n    getCommandKeys: function() {\n        return keys;\n    }\n};\n\nfunction updateAllEditors() {\n    const editor = require('./editor');\n    editor && editor.getEditors(true).forEach(function(edit) {\n        updateEditor(edit);\n    });\n}\n\nfunction updateEditor(edit) {\n    var commands = loadCommands(edit.getSession().mode);\n    edit.commands = new CommandManager(useragent.isMac ? \"mac\" : \"win\", commands);\n    edit.$mergeableCommands = [\"insertstring\", \"Edit:Backspace\", \"Edit:Delete\"];\n    edit.commands.on(\"exec\", edit.$historyTracker.bind(edit));\n    edit.$initOperationListeners();\n    edit.keyBinding.setDefaultHandler(edit.commands);\n    edit.getKeyboardHandler();\n}\n\nfunction bindCommand(commands, cmd, bindKey) {\n    var command = require(\"./command\");\n    var c = command.lookup(cmd);\n    if (!c) {\n        // Command not yet available, maybe sandbox hasn't booted up yet\n        return;\n        // return console.warn(\"Failed to bind keys to command\", cmd, \", maybe not yet defined?\");\n    }\n    commands.push({\n        name: cmd,\n        bindKey: bindKey,\n        exec: function(edit, args) {\n            return command.exec(cmd, edit, edit.getSession(), args);\n        },\n        multiSelectAction: c.multiSelectAction,\n        readOnly: c.readOnly,\n        scrollIntoView: c.scrollIntoView === undefined ? \"cursor\" : c.scrollIntoView\n    });\n}\n\nfunction loadCommands(mode) {\n    // Some special builtin commands\n    var commands = [{\n        name: \"cut\",\n        exec: function(editor) {\n            var range = editor.getSelectionRange();\n            editor._emit(\"cut\", range);\n\n            if (!editor.selection.isEmpty()) {\n                editor.session.remove(range);\n                editor.clearSelection();\n            }\n        },\n        multiSelectAction: \"forEach\",\n        scrollIntoView: \"cursor\"\n    }, {\n        name: \"paste\",\n        exec: function(editor, args) {\n            editor.$handlePaste(args);\n        },\n        scrollIntoView: \"cursor\"\n    }, {\n        name: \"insertstring\",\n        exec: function(editor, str) {\n            editor.insert(str);\n        },\n        multiSelectAction: \"forEach\",\n        scrollIntoView: \"cursor\"\n    }, {\n        name: \"inserttext\",\n        exec: function(editor, session, args) {\n            editor.insert(lang.stringRepeat(args.text || \"\", args.times || 1));\n        },\n        multiSelectAction: \"forEach\",\n        scrollIntoView: \"cursor\"\n    }];\n\n    _.each(keys, function(cmd, name) {\n        bindCommand(commands, name, cmd);\n    });\n\n    if (mode) {\n        _.each(mode.keys, function(cmd, name) {\n            bindCommand(commands, name, cmd);\n        });\n    }\n\n    return commands;\n}\n\nmodule.exports = api;\n"]}