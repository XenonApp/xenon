{"version":3,"sources":["../../src/js/modes.js"],"names":["eventbus","require","command","customModes","longestFirst","a","b","length","endsWith","str","suffix","indexOf","path","declare","modes","extensionMapping","extensionsByLength","filenameMapping","shebangMapping","fallbackMode","language","name","highlighter","handlers","commands","preferences","keys","isFallback","api","hook","on","config","getModes","updateAllModes","allModes","Object","get","getModeForSession","session","mode","getModeForPath","filename","shebang_line","getLine","slice","shebang","path_","i","ext","setSessionMode","setMode","mod","Mode","clearAnnotations","emit","normalizeModes","_","each","events","console","log","updateMappings","declareAllModeCommands","extensions","forEach","filenames","shebangs","sort","modeName","declareModeCommands","define","doc","exec","edit","editor","setEditorConfiguration","setSessionConfiguration","readOnly","cmd","existingCommand","lookup","modeCommands","commandSpec","modeCommand","execCommand","catch","err","error","Promise","reject","module","exports"],"mappings":"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","file":"modes.js","sourcesContent":["/*global define, _, zed */\n\"use strict\";\n\nconst eventbus = require('./eventbus');\nconst command = require('./command');\nconst customModes = {\n    'mode/zed_ui': require('./mode/zed_ui'),\n    'mode/commit': require('./mode/commit')\n};\n\nfunction longestFirst(a, b) {\n    return b.length - a.length;\n}\n\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n\nvar path = require(\"./lib/path\");\n\neventbus.declare(\"modesloaded\");\neventbus.declare(\"modeset\");\n\nvar modes = {};\n\n// Mappings from file extension to mode name, e.g. \"js\" -> \"javascript\"\nvar extensionMapping = {};\nvar extensionsByLength = [];\n\n// Mappings from particular file names to mode name, e.g. \"Makefile\" -> \"makefile\"\nvar filenameMapping = {};\n\n// Mappings from shebang lines to mode name, e.g. \"python3\" -> \"python\"\nvar shebangMapping = {};\n\n// Mode to use if all else fails\nvar fallbackMode = {\n    language: \"text\",\n    name: \"Plain Text\",\n    highlighter: \"ace/mode/text\",\n    handlers: {},\n    commands: {},\n    preferences: {},\n    keys: {},\n    isFallback: true\n};\n\nvar api = {\n    hook: function() {\n        eventbus.on(\"configchanged\", function(config) {\n            modes = config.getModes();\n            updateAllModes();\n        });\n    },\n    allModes: function() {\n        return Object.keys(modes);\n    },\n    get: function(language) {\n        return modes[language];\n    },\n    getModeForSession: function(session) {\n        var mode = api.getModeForPath(session.filename);\n        if (mode) {\n            return mode;\n        }\n\n        var shebang_line = session.getLine(0);\n        if (shebang_line.slice(0, 2) == \"#!\") {\n            for (var shebang in shebangMapping) {\n                if (shebang_line.indexOf(shebang) > 0) {\n                    return api.get(shebangMapping[shebang]);\n                }\n            }\n        }\n\n        return fallbackMode;\n    },\n    getModeForPath: function(path_) {\n        var filename = path.filename(path_);\n        if (filenameMapping[filename]) {\n            return api.get(filenameMapping[filename]);\n        }\n\n        if (filename.indexOf(\".\") > -1) {\n            for (var i = 0; i < extensionsByLength.length; ++i) {\n                var ext = extensionsByLength[i];\n                if (endsWith(filename, \".\" + ext)) {\n                    return api.get(extensionMapping[ext]);\n                }\n            }\n        }\n\n        return null;\n    },\n    setSessionMode: function(session, mode) {\n        if (typeof mode === \"string\") {\n            mode = api.get(mode);\n        }\n        if (mode) {\n            session.mode = mode;\n            if (mode.highlighter.indexOf(\"ace/mode\") === 0) {\n                session.setMode(mode.highlighter);\n            } else {\n                const mod = customModes[mode.highlighter];\n                session.setMode(new mod.Mode());\n            }\n            session.clearAnnotations();\n            eventbus.emit(\"modeset\", session, mode);\n        }\n    }\n};\n\nfunction normalizeModes() {\n    _.each(modes, function(mode, name) {\n        mode.language = name;\n\n        // Normalize\n        if (!mode.events) {\n            mode.events = {};\n        }\n        if (!mode.commands) {\n            mode.commands = {};\n        }\n        if (!mode.keys) {\n            mode.keys = {};\n        }\n        if (!mode.preferences) {\n            mode.preferences = {};\n        }\n        if (!mode.handlers) {\n            mode.handlers = {};\n        }\n    });\n}\n\nfunction updateAllModes() {\n    console.log(\"Updating modes...\");\n    normalizeModes();\n    updateMappings();\n    eventbus.emit(\"modesloaded\", api);\n    declareAllModeCommands();\n}\n\nfunction updateMappings() {\n    extensionMapping = {};\n    filenameMapping = {};\n    shebangMapping = {};\n    _.each(modes, function(mode) {\n        if (mode.extensions) {\n            mode.extensions.forEach(function(ext) {\n                extensionMapping[ext] = mode.language;\n            });\n        }\n        if (mode.filenames) {\n            mode.filenames.forEach(function(filename) {\n                filenameMapping[filename] = mode.language;\n            });\n        }\n        shebangMapping[mode.language] = mode.language;\n        if (mode.shebangs) {\n            mode.shebangs.forEach(function(shebang) {\n                shebangMapping[shebang] = mode.language;\n            });\n        }\n    });\n    extensionsByLength = Object.keys(extensionMapping).sort(longestFirst);\n}\n\nfunction declareAllModeCommands() {\n    _.each(api.allModes(), function(modeName) {\n        declareModeCommands(api.get(modeName));\n    });\n    eventbus.emit(\"commandsloaded\");\n}\n\nfunction declareModeCommands(mode) {\n    command.define(\"Configuration:Mode:\" + mode.name, {\n        doc: \"Begin using this mode for the current document.\",\n        exec: function(edit, session) {\n            var editor = require(\"./editor\");\n            api.setSessionMode(session, mode);\n            editor.setEditorConfiguration(edit);\n            editor.setSessionConfiguration(session);\n        },\n        readOnly: true\n    });\n\n    _.each(mode.commands, function(cmd, name) {\n        var existingCommand = command.lookup(name);\n        if (!existingCommand) {\n            // Declare it as a special mode command, with an implementation\n            // specific to the mode\n            var modeCommands = {};\n            modeCommands[mode.language] = cmd;\n            var commandSpec = {\n                exec: function(edit, session) {\n                    var cmd = commandSpec.modeCommand[session.mode.language];\n                    if (cmd) {\n                        return require(\"./sandboxes\").execCommand(name, cmd, session).\n                        catch (function(err) {\n                            console.error(err);\n                            return Promise.reject(err);\n                        });\n                    } else {\n                        return Promise.reject(\"not-supported\");\n                    }\n                },\n                readOnly: true,\n                modeCommand: modeCommands\n            };\n            command.define(name, commandSpec);\n        } else {\n            if(!existingCommand.modeCommand) {\n                existingCommand.modeCommand = {};\n            }\n            existingCommand.modeCommand[mode.language] = cmd;\n        }\n    });\n}\n\nmodule.exports = api;\n"]}