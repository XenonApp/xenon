{"version":3,"sources":["../../../src/js/fs/s3.js"],"names":["history","require","tokenStore","poll_watcher","AWS","fsUtil","mimeTypes","pathUtil","module","exports","plugin","options","bucket","s3","api","listFiles","Promise","resolve","reject","listObjects","Bucket","err","result","filenames","Contents","forEach","file","push","Key","readFile","path","getObject","substring","data","statusCode","watcher","setCacheTag","ETag","uint8ArrayToBinaryString","Body","writeFile","content","binary","body","ext","contentType","binaryStringAsUint8Array","putObject","ContentType","deleteFile","deleteObject","watchFile","callback","unwatchFile","getCacheTag","headObject","getCapabilities","pushProject","all","get","then","keys","console","error","Error","config","update","accessKeyId","secretAccessKey","S3"],"mappings":"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","file":"s3.js","sourcesContent":["'use strict';\n\nconst history = require('../history');\nconst tokenStore = require('../local_store');\n\nconst poll_watcher = require(\"./poll_watcher\");\nconst AWS = require(\"../lib/aws-sdk.min\");\nconst fsUtil = require(\"./util\");\nconst mimeTypes = require(\"../lib/mime_types\");\nconst pathUtil = require(\"../lib/path\");\n\nmodule.exports = function plugin(options) {\n    var bucket = options.bucket;\n\n    var s3;\n\n    var api = {\n        listFiles: function() {\n            return new Promise(function(resolve, reject) {\n                s3.listObjects({\n                    Bucket: bucket\n                }, function(err, result) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    var filenames = [];\n                    result.Contents.forEach(function(file) {\n                        filenames.push(\"/\" + file.Key);\n                    });\n                    resolve(filenames);\n                });\n            });\n        },\n        readFile: function(path) {\n            return new Promise(function(resolve, reject) {\n                s3.getObject({\n                    Bucket: bucket,\n                    Key: path.substring(1)\n                }, function(err, data) {\n                    if (err) {\n                        return reject(err.statusCode);\n                    }\n                    watcher.setCacheTag(path, data.ETag);\n                    resolve(fsUtil.uint8ArrayToBinaryString(data.Body));\n                });\n            });\n        },\n        writeFile: function(path, content, binary) {\n            return new Promise(function(resolve, reject) {\n                var body;\n                var ext = pathUtil.ext(path);\n                var contentType = mimeTypes[ext] || \"application/octet-stream\";\n                if (binary) {\n                    body = fsUtil.binaryStringAsUint8Array(content);\n                } else {\n                    body = content;\n                }\n                s3.putObject({\n                    Bucket: bucket,\n                    ContentType: contentType,\n                    Key: path.substring(1),\n                    Body: body\n                }, function(err, result) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    watcher.setCacheTag(path, result.ETag);\n                    resolve();\n                });\n            });\n        },\n        deleteFile: function(path) {\n            return new Promise(function(resolve, reject) {\n                s3.deleteObject({\n                    Bucket: bucket,\n                    Key: path.substring(1)\n                }, function(err) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        },\n        watchFile: function(path, callback) {\n            watcher.watchFile(path, callback);\n        },\n        unwatchFile: function(path, callback) {\n            watcher.unwatchFile(path, callback);\n        },\n        getCacheTag: function(path) {\n            return new Promise(function(resolve, reject) {\n                s3.headObject({\n                    Bucket: bucket,\n                    Key: path.substring(1)\n                }, function(err, result) {\n                    if (err) {\n                        return reject(err.statusCode);\n                    }\n                    resolve(result.ETag);\n                });\n            });\n        },\n        getCapabilities: function() {\n            return {};\n        }\n    };\n\n    var watcher = poll_watcher(api, 5000);\n    history.pushProject(\"S3 [\" + bucket + \"]\", \"s3:\" + bucket);\n    \n    return Promise.all([tokenStore.get(\"awsAccessKey\"), tokenStore.get(\"awsSecretKey\")]).then(function(keys) {\n        if (!keys[0] || !keys[1]) {\n            console.error(\"Tokens not set: awsAccessKey and awsSecretKey\");\n            throw new Error(\"Tokens not set\");\n        }\n\n        AWS.config.update({\n            accessKeyId: keys[0],\n            secretAccessKey: keys[1]\n        });\n\n        s3 = new AWS.S3();\n\n        // TODO: fs would have to resolve a promise before being used.\n        return api;\n    });\n};\n"]}