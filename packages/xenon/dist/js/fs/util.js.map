{"version":3,"sources":["../../../src/js/fs/util.js"],"names":["module","exports","binaryStringAsUint8Array","str","buf","Uint8Array","length","i","charCodeAt","uint8ArrayToBinaryString","arr","chunks","chunkSize","push","String","fromCharCode","apply","subarray","join","queuedFilesystem","queued","resolvedFs","queue","name","noPromise","args","_","toArray","arguments","Promise","resolve","reject","fs","forEach","item","prom","then","on","off","listFiles","readFile","writeFile","deleteFile","watch"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB;AACbC,8BAA0B,UAASC,GAAT,EAAc;AACpC,YAAIC,MAAM,IAAIC,UAAJ,CAAeF,IAAIG,MAAnB,CAAV;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,IAAIG,MAAxB,EAAgCC,GAAhC,EAAqC;AACjCH,gBAAIG,CAAJ,IAASJ,IAAIK,UAAJ,CAAeD,CAAf,CAAT;AACH;AACD,eAAOH,GAAP;AACH,KAPY;AAQbK,8BAA0B,UAASC,GAAT,EAAc;AACpC,YAAIC,SAAS,EAAb;AACA,YAAIC,YAAY,IAAhB;AACA,aAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAIK,SAAJ,GAAgBF,IAAIJ,MAApC,EAA4CC,GAA5C,EAAiD;AAC7CI,mBAAOE,IAAP,CAAYC,OAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCN,IAAIO,QAAJ,CAAaV,IAAIK,SAAjB,EAA4B,CAACL,IAAI,CAAL,IAAUK,SAAtC,CAAhC,CAAZ;AACH;AACD,eAAOD,OAAOO,IAAP,CAAY,EAAZ,CAAP;AACH,KAfY;AAgBb;;;;AAIAC,sBAAkB,YAAW;AACzB,YAAIC,SAAS,EAAb;AACA,YAAIC,UAAJ;;AAEA,iBAASC,KAAT,CAAeC,IAAf,EAAqBC,SAArB,EAAgC;AAC5B,mBAAO,YAAW;AACd,oBAAIC,OAAOC,EAAEC,OAAF,CAAUC,SAAV,CAAX;AACA,oBAAIP,UAAJ,EAAgB;AACZ,2BAAOA,WAAWE,IAAX,EAAiBP,KAAjB,CAAuBK,UAAvB,EAAmCI,IAAnC,CAAP;AACH;AACD,oBAAID,SAAJ,EAAe;AACXJ,2BAAOP,IAAP,CAAY;AACRU,8BAAMA,IADE;AAERE,8BAAMA;AAFE,qBAAZ;AAIH,iBALD,MAKO;AACH,2BAAO,IAAII,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzCX,+BAAOP,IAAP,CAAY;AACRU,kCAAMA,IADE;AAERE,kCAAMA,IAFE;AAGRK,qCAASA,OAHD;AAIRC,oCAAQA;AAJA,yBAAZ;AAMH,qBAPM,CAAP;AAQH;AACJ,aApBD;AAqBH;AACD,eAAO;AACHD,qBAAS,UAASE,EAAT,EAAa;AAClB;AACAZ,uBAAOa,OAAP,CAAe,UAASC,IAAT,EAAe;AAC1B;AACA,wBAAIC,OAAOH,GAAGE,KAAKX,IAAR,EAAcP,KAAd,CAAoBgB,EAApB,EAAwBE,KAAKT,IAA7B,CAAX;AACA,wBAAIU,QAAQA,KAAKC,IAAjB,EAAuB;AACnBD,6BAAKC,IAAL,CAAUF,KAAKJ,OAAf,EAAwBI,KAAKH,MAA7B;AACH;AACJ,iBAND;AAOAX,yBAAS,EAAT;AACAC,6BAAaW,EAAb;AACH,aAZE;AAaHK,gBAAIf,MAAM,IAAN,CAbD;AAcHgB,iBAAKhB,MAAM,KAAN,CAdF;AAeHiB,uBAAWjB,MAAM,WAAN,CAfR;AAgBHkB,sBAAUlB,MAAM,UAAN,CAhBP;AAiBHmB,uBAAWnB,MAAM,WAAN,CAjBR;AAkBHoB,wBAAYpB,MAAM,YAAN,CAlBT;AAmBHqB,mBAAOrB,MAAM,OAAN;AAnBJ,SAAP;AAqBH;AApEY,CAAjB","file":"util.js","sourcesContent":["module.exports = {\n    binaryStringAsUint8Array: function(str) {\n        var buf = new Uint8Array(str.length);\n        for (var i = 0; i < str.length; i++) {\n            buf[i] = str.charCodeAt(i);\n        }\n        return buf;\n    },\n    uint8ArrayToBinaryString: function(arr) {\n        var chunks = [];\n        var chunkSize = 2048;\n        for (var i = 0; i * chunkSize < arr.length; i++) {\n            chunks.push(String.fromCharCode.apply(null, arr.subarray(i * chunkSize, (i + 1) * chunkSize)));\n        }\n        return chunks.join('');\n    },\n    /**\n     * Used to immediately return a filesystem object, where all methods are queued,\n     * fn should be called with the real fs object\n     */\n    queuedFilesystem: function() {\n        var queued = [];\n        var resolvedFs;\n\n        function queue(name, noPromise) {\n            return function() {\n                var args = _.toArray(arguments);\n                if (resolvedFs) {\n                    return resolvedFs[name].apply(resolvedFs, args);\n                }\n                if (noPromise) {\n                    queued.push({\n                        name: name,\n                        args: args\n                    });\n                } else {\n                    return new Promise(function(resolve, reject) {\n                        queued.push({\n                            name: name,\n                            args: args,\n                            resolve: resolve,\n                            reject: reject\n                        });\n                    });\n                }\n            };\n        }\n        return {\n            resolve: function(fs) {\n                // console.log(\"Flushin'\", queued);\n                queued.forEach(function(item) {\n                    // console.log(\"calling\", item.name, \"on\", item.args);\n                    var prom = fs[item.name].apply(fs, item.args);\n                    if (prom && prom.then) {\n                        prom.then(item.resolve, item.reject);\n                    }\n                });\n                queued = [];\n                resolvedFs = fs;\n            },\n            on: queue('on'),\n            off: queue('off'),\n            listFiles: queue(\"listFiles\"),\n            readFile: queue(\"readFile\"),\n            writeFile: queue(\"writeFile\"),\n            deleteFile: queue(\"deleteFile\"),\n            watch: queue(\"watch\")\n        };\n    }\n};\n"]}