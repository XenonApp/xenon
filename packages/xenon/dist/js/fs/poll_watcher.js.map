{"version":3,"sources":["../../../src/js/fs/poll_watcher.js"],"names":["module","exports","fs","pollInterval","tagCache","fileWatchers","fileLocks","LOCK_TIMEOUT","pollFiles","Object","keys","forEach","path","length","Date","now","getCacheTag","then","tag","fn","err","setInterval","watchFile","callback","push","unwatchFile","splice","indexOf","setCacheTag","clearTagCache","lockFile","unlockFile"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAASC,EAAT,EAAaC,YAAb,EAA2B;AACxC,QAAIC,WAAW,EAAf;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,YAAY,EAAhB;;AAEA,QAAIC,eAAe,KAAK,IAAxB,CALwC,CAKV;;AAE9B,aAASC,SAAT,GAAqB;AACjBC,eAAOC,IAAP,CAAYL,YAAZ,EAA0BM,OAA1B,CAAkC,UAASC,IAAT,EAAe;AAC7C;AACA,gBAAIP,aAAaO,IAAb,EAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACjC;AACH;;AAED;AACA,gBAAIP,UAAUM,IAAV,KAAmBN,UAAUM,IAAV,IAAkBE,KAAKC,GAAL,KAAaR,YAAtD,EAAoE;AAChE;AACH;;AAEDL,eAAGc,WAAH,CAAeJ,IAAf,EAAqBK,IAArB,CAA0B,UAASC,GAAT,EAAc;AACpC,oBAAId,SAASQ,IAAT,MAAmBM,GAAvB,EAA4B;AACxBb,iCAAaO,IAAb,EAAmBD,OAAnB,CAA2B,UAASQ,EAAT,EAAa;AACpCA,2BAAGP,IAAH,EAAS,SAAT;AACH,qBAFD;AAGAR,6BAASQ,IAAT,IAAiBM,GAAjB;AACH;AACJ,aAPD,EAOG,UAASE,GAAT,EAAc;AACb,uBAAOhB,SAASQ,IAAT,CAAP;AACA,oBAAIQ,QAAQ,GAAZ,EAAiB;AACbf,iCAAaO,IAAb,EAAmBD,OAAnB,CAA2B,UAASQ,EAAT,EAAa;AACpCA,2BAAGP,IAAH,EAAS,SAAT;AACH,qBAFD;AAGA,2BAAOP,aAAaO,IAAb,CAAP;AACH,iBALD,MAKO,IAAIQ,QAAQ,GAAZ,EAAiB;AACpBf,iCAAaO,IAAb,EAAmBD,OAAnB,CAA2B,UAASQ,EAAT,EAAa;AACpCA,2BAAGP,IAAH,EAAS,cAAT;AACH,qBAFD;AAGH,iBAJM,MAIA;AACHP,iCAAaO,IAAb,EAAmBD,OAAnB,CAA2B,UAASQ,EAAT,EAAa;AACpCA,2BAAGP,IAAH,EAAS,OAAT;AACH,qBAFD;AAGH;AACJ,aAvBD;AAwBH,SAnCD;AAoCH;;AAEDS,gBAAYb,SAAZ,EAAuBL,YAAvB;;AAEA,WAAO;AACHmB,mBAAW,UAASV,IAAT,EAAeW,QAAf,EAAyB;AAChClB,yBAAaO,IAAb,IAAqBP,aAAaO,IAAb,KAAsB,EAA3C;AACAP,yBAAaO,IAAb,EAAmBY,IAAnB,CAAwBD,QAAxB;AACH,SAJE;AAKHE,qBAAa,UAASb,IAAT,EAAeW,QAAf,EAAyB;AAClC,gBAAI,CAAClB,aAAaO,IAAb,CAAL,EAAyB;AACrB;AACH;AACDP,yBAAaO,IAAb,EAAmBc,MAAnB,CAA0BrB,aAAaO,IAAb,EAAmBe,OAAnB,CAA2BJ,QAA3B,CAA1B,EAAgE,CAAhE;AACH,SAVE;AAWHK,qBAAa,UAAShB,IAAT,EAAeM,GAAf,EAAoB;AAC7Bd,qBAASQ,IAAT,IAAiBM,GAAjB;AACH,SAbE;AAcHW,uBAAe,YAAW;AACtBzB,uBAAW,EAAX;AACH,SAhBE;AAiBH0B,kBAAU,UAASlB,IAAT,EAAe;AACrBN,sBAAUM,IAAV,IAAkBE,KAAKC,GAAL,EAAlB;AACH,SAnBE;AAoBHgB,oBAAY,UAASnB,IAAT,EAAe;AACvB,mBAAON,UAAUM,IAAV,CAAP;AACH;AAtBE,KAAP;AAwBH,CAxED","file":"poll_watcher.js","sourcesContent":["module.exports = function(fs, pollInterval) {\n    var tagCache = {};\n    var fileWatchers = {};\n    var fileLocks = {};\n\n    var LOCK_TIMEOUT = 30 * 1000; // 30 seconds\n\n    function pollFiles() {\n        Object.keys(fileWatchers).forEach(function(path) {\n            // If nobody's listening, let's not poll\n            if (fileWatchers[path].length === 0) {\n                return;\n            }\n\n            // If the file is locked (e.g. write going on), let's not poll\n            if (fileLocks[path] && fileLocks[path] > Date.now() - LOCK_TIMEOUT) {\n                return;\n            }\n\n            fs.getCacheTag(path).then(function(tag) {\n                if (tagCache[path] !== tag) {\n                    fileWatchers[path].forEach(function(fn) {\n                        fn(path, \"changed\");\n                    });\n                    tagCache[path] = tag;\n                }\n            }, function(err) {\n                delete tagCache[path];\n                if (err === 404) {\n                    fileWatchers[path].forEach(function(fn) {\n                        fn(path, \"deleted\");\n                    });\n                    delete fileWatchers[path];\n                } else if (err === 410) {\n                    fileWatchers[path].forEach(function(fn) {\n                        fn(path, \"disconnected\");\n                    });\n                } else {\n                    fileWatchers[path].forEach(function(fn) {\n                        fn(path, \"error\");\n                    });\n                }\n            });\n        });\n    }\n\n    setInterval(pollFiles, pollInterval);\n\n    return {\n        watchFile: function(path, callback) {\n            fileWatchers[path] = fileWatchers[path] || [];\n            fileWatchers[path].push(callback);\n        },\n        unwatchFile: function(path, callback) {\n            if (!fileWatchers[path]) {\n                return;\n            }\n            fileWatchers[path].splice(fileWatchers[path].indexOf(callback), 1);\n        },\n        setCacheTag: function(path, tag) {\n            tagCache[path] = tag;\n        },\n        clearTagCache: function() {\n            tagCache = {};\n        },\n        lockFile: function(path) {\n            fileLocks[path] = Date.now();\n        },\n        unlockFile: function(path) {\n            delete fileLocks[path];\n        }\n    };\n};\n"]}