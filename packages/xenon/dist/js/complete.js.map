{"version":3,"sources":["../../src/js/complete.js"],"names":["Autocomplete","require","command","eventbus","config","editor","handlers","completionRegex","continuousCompletionTimerId","continuousCompletionSession","continuousCompletionCursor","declare","api","hook","on","session","delta","getPreference","edit","editorForSession","completionListener","action","lines","length","completionTriggerCheck","row","getCursorPosition","cancelCompletion","completer","getCompletions","pos","prefix","callback","modeCompleteCommands","mode","complete","globalCompleteCommands","getHandlers","results","completeCommands","concat","startDate","Date","now","Promise","all","map","cmdName","exec","then","results_","err","console","error","updateHandlerTimeout","filename","setTimeout","triggers","completionTriggers","cursor","selection","getCursor","line","getLine","i","trigger","match","for_loop","j","column","shouldComplete","getSelectedText","getSession","doc","getDocument","ch","editors","getEditors","clearTimeout","detach","event","change","text","multiSelect","inMultiSelectMode","activated","getHandlerTimeout","continuousCompletion","emit","completers","autoInsert","showPopup","popup","goTo","cancelContextMenu","prototype","commands","Tab","getRow","navigateUp","define","forEachSelection","indent","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAeC,QAAQ,oBAAR,EAA8BD,YAAnD;AACA,MAAME,UAAUD,QAAQ,WAAR,CAAhB;AACA,MAAME,WAAWF,QAAQ,YAAR,CAAjB;AACA,MAAMG,SAASH,QAAQ,UAAR,CAAf;AACA,MAAMI,SAASJ,QAAQ,UAAR,CAAf;AACA,MAAMK,WAAWL,QAAQ,YAAR,CAAjB;;AAEA,IAAIM,kBAAkB,eAAtB;;AAEA;AACA,IAAIC,2BAAJ;AACA,IAAIC,2BAAJ;AACA,IAAIC,0BAAJ;;AAEAP,SAASQ,OAAT,CAAiB,UAAjB;;AAEA,IAAIC,MAAM;AACNC,UAAM,YAAW;AACbV,iBAASW,EAAT,CAAY,gBAAZ,EAA8B,UAASC,OAAT,EAAkBC,KAAlB,EAAyB;AACnD,gBAAIZ,OAAOa,aAAP,CAAqB,sBAArB,CAAJ,EAAkD;AAC9C,oBAAIC,OAAOC,iBAAiBJ,OAAjB,CAAX;AACA,oBAAI,CAACG,IAAL,EAAW;AACP;AACH;AACDE,mCAAmBF,IAAnB,EAAyBF,KAAzB;AACH;;AAED;AACA,gBAAIZ,OAAOa,aAAP,CAAqB,uBAArB,KAAiDD,MAAMK,MAAN,KAAiB,YAAlE,IAAkFL,MAAMM,KAAN,CAAYC,MAAZ,KAAuB,CAA7G,EAAgH;AAC5GC,uCAAuBT,OAAvB;AACH;AACJ,SAbD;AAcA;AACA;AACAZ,iBAASW,EAAT,CAAY,kBAAZ,EAAgC,UAASI,IAAT,EAAe;AAC3C,gBAAI,CAACV,2BAAL,EAAkC;AAC9B;AACH;AACD,gBAAIC,gCAAgCS,KAAKH,OAArC,IAAgDL,2BAA2Be,GAA3B,KAAmCP,KAAKQ,iBAAL,GAAyBD,GAAhH,EAAqH;AACjHE,iCAAiBT,IAAjB;AACH;AACJ,SAPD;AAQH;AA1BK,CAAV;;AA6BA,IAAIU,YAAY;AACZ;AACAC,oBAAgB,UAASX,IAAT,EAAeH,OAAf,EAAwBe,GAAxB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+C;AAC3D,YAAIC,uBAAuBlB,QAAQmB,IAAR,CAAa5B,QAAb,CAAsB6B,QAAjD;AACA,YAAIC,yBAAyBhC,OAAOiC,WAAP,GAAqBF,QAAlD;AACA,YAAIG,UAAU,EAAd;AACA,YAAIC,mBAAmB,EAAvB;AACA,YAAIN,oBAAJ,EAA0B;AACtBM,+BAAmBA,iBAAiBC,MAAjB,CAAwBP,oBAAxB,CAAnB;AACH;AACD,YAAIG,sBAAJ,EAA4B;AACxBG,+BAAmBA,iBAAiBC,MAAjB,CAAwBJ,sBAAxB,CAAnB;AACH;AACD,YAAIK,YAAYC,KAAKC,GAAL,EAAhB;AACAC,gBAAQC,GAAR,CAAYN,iBAAiBO,GAAjB,CAAqB,UAASC,OAAT,EAAkB;AAC/C,mBAAO7C,QAAQ8C,IAAR,CAAaD,OAAb,EAAsB7B,IAAtB,EAA4BH,OAA5B,EAAqCkC,IAArC,CAA0C,UAASC,QAAT,EAAmB;AAChEZ,0BAAUA,QAAQE,MAAR,CAAeU,QAAf,CAAV;AACH,aAFM,EAEJ,UAASC,GAAT,EAAc;AACbC,wBAAQC,KAAR,CAAc,2BAAd,EAA2CF,GAA3C;AACH,aAJM,CAAP;AAKH,SANW,CAAZ,EAMIF,IANJ,CAMS,YAAW;AAChB3C,qBAASgD,oBAAT,CAA8B,UAA9B,EAA0CvC,QAAQwC,QAAlD,EAA4Dd,SAA5D,EAAuErC,OAAOa,aAAP,CAAqB,2BAArB,CAAvE;AACAe,qBAAS,IAAT,EAAeM,OAAf;AACH,SATD;AAUH;AAxBW,CAAhB;;AA2BA,SAASd,sBAAT,CAAgCT,OAAhC,EAAyC;AACrCyC,eAAW,YAAW;AAClB,YAAIC,WAAW1C,QAAQmB,IAAR,CAAawB,kBAA5B;AACA,YAAI,CAACD,QAAL,EAAe;AACX;AACH;AACD,YAAIE,SAAS5C,QAAQ6C,SAAR,CAAkBC,SAAlB,EAAb;AACA,YAAIC,OAAO/C,QAAQgD,OAAR,CAAgBJ,OAAOlC,GAAvB,CAAX;AACA,aAAK,IAAIuC,IAAI,CAAb,EAAgBA,IAAIP,SAASlC,MAA7B,EAAqCyC,GAArC,EAA0C;AACtC,gBAAIC,UAAUR,SAASO,CAAT,CAAd;AACA,gBAAIE,QAAQ,IAAZ;AACAC,sBAAU,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,QAAQ1C,MAA5B,EAAoC6C,GAApC,EAAyC;AAC/C,oBAAIH,QAAQG,CAAR,KAAcN,KAAKH,OAAOU,MAAP,IAAiBJ,QAAQ1C,MAAR,GAAiB6C,CAAlC,CAAL,CAAlB,EAA8D;AAC1DF,4BAAQ,KAAR;AACA,0BAAMC,QAAN;AACH;AACJ;AACD,gBAAID,KAAJ,EAAW;AACP/B,yBAAShB,iBAAiBJ,OAAjB,CAAT,EAAoC,IAApC;AACA;AACH;AACJ;AACJ,KArBD,EAqBG,CArBH;AAsBH;;AAED,SAASuD,cAAT,CAAwBpD,IAAxB,EAA8B;AAC1B,QAAIA,KAAKqD,eAAL,EAAJ,EAA4B;AACxB,eAAO,KAAP;AACH;AACD,QAAIxD,UAAUG,KAAKsD,UAAL,EAAd;AACA,QAAIC,MAAM1D,QAAQ2D,WAAR,EAAV;AACA,QAAI5C,MAAMZ,KAAKQ,iBAAL,EAAV;;AAEA,QAAIoC,OAAOW,IAAIV,OAAJ,CAAYjC,IAAIL,GAAhB,CAAX;AACA,QAAIkD,KAAKb,KAAKhC,IAAIuC,MAAJ,GAAa,CAAlB,CAAT;AACA,WAAOM,MAAM,KAAK3B,IAAL,CAAU2B,EAAV,CAAb;AACH;;AAED,SAASxD,gBAAT,CAA0BJ,OAA1B,EAAmC;AAC/B,QAAI6D,UAAUvE,OAAOwE,UAAP,EAAd;;AAEA,SAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIY,QAAQrD,MAA5B,EAAoCyC,GAApC,EAAyC;AACrC,YAAIY,QAAQZ,CAAR,EAAWjD,OAAX,KAAuBA,OAA3B,EAAoC;AAChC,mBAAO6D,QAAQZ,CAAR,CAAP;AACH;AACJ;AACJ;;AAED,SAASrC,gBAAT,CAA0BT,IAA1B,EAAgC;AAC5B4D,iBAAatE,2BAAb;AACAA,kCAA8B,IAA9B;AACA,QAAIU,KAAKU,SAAT,EAAoB;AAChBV,aAAKU,SAAL,CAAemD,MAAf;AACH;AACJ;;AAED;;;;;AAKA,SAAS3D,kBAAT,CAA4BF,IAA5B,EAAkC8D,KAAlC,EAAyC;AACrC,QAAIC,SAASD,KAAb;AACAvE,kCAA8BS,KAAKH,OAAnC;AACAL,iCAA6BQ,KAAKQ,iBAAL,EAA7B;;AAEA,QAAIuD,OAAO5D,MAAP,KAAkB,YAAtB,EAAoC;AAChC,eAAOM,iBAAiBT,IAAjB,CAAP;AACH;AACD,QAAI,CAACX,gBAAgByC,IAAhB,CAAqBiC,OAAOC,IAA5B,CAAL,EAAwC;AACpC,eAAOvD,iBAAiBT,IAAjB,CAAP;AACH;AACD,QAAIA,KAAKH,OAAL,CAAaoE,WAAb,CAAyBC,iBAA7B,EAAgD;AAC5C,eAAOzD,iBAAiBT,IAAjB,CAAP;AACH;AACD,QAAI,CAACV,2BAAL,EAAkC;AAC9BA,sCAA8BgD,WAAW,YAAW;AAChDhD,0CAA8B,IAA9B;AACA,gBAAI,CAACU,KAAKU,SAAN,IAAmB,CAACV,KAAKU,SAAL,CAAeyD,SAAvC,EAAkD;AAC9ClD,yBAASjB,IAAT,EAAe,IAAf;AACH;AACJ,SAL6B,EAK3BZ,SAASgF,iBAAT,CAA2B,OAA3B,EAAoCpE,KAAKH,OAAL,CAAawC,QAAjD,EAA2DnD,OAAOa,aAAP,CAAqB,2BAArB,CAA3D,CAL2B,CAA9B;AAMH;AACJ;;AAED,SAASkB,QAAT,CAAkBjB,IAAlB,EAAwBqE,oBAAxB,EAA8C;AAC1CpF,aAASqF,IAAT,CAAc,UAAd,EAA0BtE,IAA1B;AACA,QAAI,CAACA,KAAKU,SAAV,EAAqB;AACjBV,aAAKU,SAAL,GAAiB,IAAI5B,YAAJ,EAAjB;AACAkB,aAAKuE,UAAL,GAAkB,CAAC7D,SAAD,CAAlB;AACH;AACDV,SAAKU,SAAL,CAAe8D,UAAf,GAA4B,KAA5B,CAN0C,CAMP;AACnCxE,SAAKU,SAAL,CAAe+D,SAAf,CAAyBzE,IAAzB;AACA,QAAIA,KAAKU,SAAL,CAAegE,KAAnB,EAA0B;AACtB1E,aAAKU,SAAL,CAAeiE,IAAf,CAAoB,OAApB;AACA3E,aAAKU,SAAL,CAAekE,iBAAf;AACA5E,aAAKU,SAAL,CAAeiE,IAAf;AACH;AACJ;;AAED7F,aAAa+F,SAAb,CAAuBC,QAAvB,CAAgCC,GAAhC,GAAsC,UAAS5F,MAAT,EAAiB;AACnDA,WAAOuB,SAAP,CAAiBiE,IAAjB,CAAsB,MAAtB;AACH,CAFD;AAGA7F,aAAa+F,SAAb,CAAuBC,QAAvB,CAAgC,WAAhC,IAA+C,UAAS9E,IAAT,EAAe;AAC1DA,SAAKU,SAAL,CAAeiE,IAAf,CAAoB,IAApB;AACH,CAFD;AAGA7F,aAAa+F,SAAb,CAAuBC,QAAvB,CAAgC,IAAhC,IAAwC,UAAS9E,IAAT,EAAe;AACnD,QAAIA,KAAKU,SAAL,CAAegE,KAAf,CAAqBM,MAArB,MAAiC,CAArC,EAAwC;AACpCvE,yBAAiBT,IAAjB;AACAA,aAAKiF,UAAL;AACH,KAHD,MAGO;AACHjF,aAAKU,SAAL,CAAeiE,IAAf,CAAoB,IAApB;AACH;AACJ,CAPD;;AASA3F,QAAQkG,MAAR,CAAe,eAAf,EAAgC;AAC5B3B,SAAK,qIADuB;AAE5BzB,UAAM,UAAS9B,IAAT,EAAe;AACjB,YAAIoD,eAAepD,IAAf,CAAJ,EAA0B;AACtBiB,qBAASjB,IAAT;AACH,SAFD,MAEO;AACH,gBAAIA,KAAKkE,iBAAT,EAA4B;AACxBlE,qBAAKmF,gBAAL,CAAsB;AAClBrD,0BAAM,UAAS9B,IAAT,EAAe;AACjB,+BAAOA,KAAKoF,MAAL,EAAP;AACH;AAHiB,iBAAtB;AAKH,aAND,MAMO;AACHpF,qBAAKoF,MAAL;AACH;AACJ;AACJ;AAhB2B,CAAhC;;AAmBAC,OAAOC,OAAP,GAAiB5F,GAAjB","file":"complete.js","sourcesContent":["\"use strict\";\n\nconst Autocomplete = require(\"./lib/autocomplete\").Autocomplete;\nconst command = require('./command');\nconst eventbus = require('./eventbus');\nconst config = require('./config');\nconst editor = require('./editor');\nconst handlers = require('./handlers');\n\nvar completionRegex = /^[a-zA-Z_\\$]$/;\n\n// Continuous completion related variables\nvar continuousCompletionTimerId;\nvar continuousCompletionSession;\nvar continuousCompletionCursor;\n\neventbus.declare(\"complete\");\n\nvar api = {\n    hook: function() {\n        eventbus.on(\"sessionchanged\", function(session, delta) {\n            if (config.getPreference(\"continuousCompletion\")) {\n                var edit = editorForSession(session);\n                if (!edit) {\n                    return;\n                }\n                completionListener(edit, delta);\n            }\n            \n            // TODO: possibly check text in lines[0] to make sure it is only 1 length\n            if (config.getPreference(\"autoTriggerCompletion\") && delta.action === \"insertText\" && delta.lines.length === 1) {\n                completionTriggerCheck(session);\n            }\n        });\n        // If the selection (cursor) changed and the session changed, cursor line changed\n        // cancel completion from showing up, or hide it if it's visible\n        eventbus.on(\"selectionchanged\", function(edit) {\n            if (!continuousCompletionTimerId) {\n                return;\n            }\n            if (continuousCompletionSession !== edit.session || continuousCompletionCursor.row !== edit.getCursorPosition().row) {\n                cancelCompletion(edit);\n            }\n        });\n    },\n};\n\nvar completer = {\n    // This uses callback style because that's what Ace's completer expects\n    getCompletions: function(edit, session, pos, prefix, callback) {\n        var modeCompleteCommands = session.mode.handlers.complete;\n        var globalCompleteCommands = config.getHandlers().complete;\n        var results = [];\n        var completeCommands = [];\n        if (modeCompleteCommands) {\n            completeCommands = completeCommands.concat(modeCompleteCommands);\n        }\n        if (globalCompleteCommands) {\n            completeCommands = completeCommands.concat(globalCompleteCommands);\n        }\n        var startDate = Date.now();\n        Promise.all(completeCommands.map(function(cmdName) {\n            return command.exec(cmdName, edit, session).then(function(results_) {\n                results = results.concat(results_);\n            }, function(err) {\n                console.error(\"Error during completion: \", err);\n            });\n        })).then(function() {\n            handlers.updateHandlerTimeout(\"complete\", session.filename, startDate, config.getPreference(\"continuousCompletionDelay\"));\n            callback(null, results);\n        });\n    }\n};\n\nfunction completionTriggerCheck(session) {\n    setTimeout(function() {\n        var triggers = session.mode.completionTriggers;\n        if (!triggers) {\n            return;\n        }\n        var cursor = session.selection.getCursor();\n        var line = session.getLine(cursor.row);\n        for (var i = 0; i < triggers.length; i++) {\n            var trigger = triggers[i];\n            var match = true;\n            for_loop: for (var j = 0; j < trigger.length; j++) {\n                if (trigger[j] != line[cursor.column - (trigger.length - j)]) {\n                    match = false;\n                    break for_loop;\n                }\n            }\n            if (match) {\n                complete(editorForSession(session), true);\n                return;\n            }\n        }\n    }, 0);\n}\n\nfunction shouldComplete(edit) {\n    if (edit.getSelectedText()) {\n        return false;\n    }\n    var session = edit.getSession();\n    var doc = session.getDocument();\n    var pos = edit.getCursorPosition();\n\n    var line = doc.getLine(pos.row);\n    var ch = line[pos.column - 1];\n    return ch && /\\S/.exec(ch);\n}\n\nfunction editorForSession(session) {\n    var editors = editor.getEditors();\n\n    for (var i = 0; i < editors.length; i++) {\n        if (editors[i].session === session) {\n            return editors[i];\n        }\n    }\n}\n\nfunction cancelCompletion(edit) {\n    clearTimeout(continuousCompletionTimerId);\n    continuousCompletionTimerId = null;\n    if (edit.completer) {\n        edit.completer.detach();\n    }\n}\n\n/**\n * Listens to change events and decides whether or not so show\n * the completion UI\n */\n\nfunction completionListener(edit, event) {\n    var change = event;\n    continuousCompletionSession = edit.session;\n    continuousCompletionCursor = edit.getCursorPosition();\n\n    if (change.action !== \"insertText\") {\n        return cancelCompletion(edit);\n    }\n    if (!completionRegex.exec(change.text)) {\n        return cancelCompletion(edit);\n    }\n    if (edit.session.multiSelect.inMultiSelectMode) {\n        return cancelCompletion(edit);\n    }\n    if (!continuousCompletionTimerId) {\n        continuousCompletionTimerId = setTimeout(function() {\n            continuousCompletionTimerId = null;\n            if (!edit.completer || !edit.completer.activated) {\n                complete(edit, true);\n            }\n        }, handlers.getHandlerTimeout(\"check\", edit.session.filename, config.getPreference(\"continuousCompletionDelay\")));\n    }\n}\n\nfunction complete(edit, continuousCompletion) {\n    eventbus.emit(\"complete\", edit);\n    if (!edit.completer) {\n        edit.completer = new Autocomplete();\n        edit.completers = [completer];\n    }\n    edit.completer.autoInsert = false; //!continuousCompletion;\n    edit.completer.showPopup(edit);\n    if (edit.completer.popup) {\n        edit.completer.goTo(\"start\");\n        edit.completer.cancelContextMenu();\n        edit.completer.goTo()\n    }\n}\n\nAutocomplete.prototype.commands.Tab = function(editor) {\n    editor.completer.goTo(\"down\");\n};\nAutocomplete.prototype.commands[\"Shift-Tab\"] = function(edit) {\n    edit.completer.goTo(\"up\");\n};\nAutocomplete.prototype.commands[\"Up\"] = function(edit) {\n    if (edit.completer.popup.getRow() <= 0) {\n        cancelCompletion(edit);\n        edit.navigateUp();\n    } else {\n        edit.completer.goTo(\"up\");\n    }\n};\n\ncommand.define(\"Edit:Complete\", {\n    doc: \"Pop up a menu with a list of possible completions for the current word if preceeding the cursor is an identifier, otherwise indent.\",\n    exec: function(edit) {\n        if (shouldComplete(edit)) {\n            complete(edit);\n        } else {\n            if (edit.inMultiSelectMode) {\n                edit.forEachSelection({\n                    exec: function(edit) {\n                        return edit.indent();\n                    }\n                });\n            } else {\n                edit.indent();\n            }\n        }\n    }\n});\n\nmodule.exports = api;\n"]}