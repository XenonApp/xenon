{"version":3,"sources":["../../src/js/webservers.js"],"names":["HttpServer","require","eventbus","servers","availablePort","api","hook","on","_","each","server","stop","startServer","id","requestHandler","start","catch","e","console","log","then","host","port","stopServer","Promise","resolve","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAaC,QAAQ,aAAR,EAAuBD,UAA1C;AACA,MAAME,WAAWD,QAAQ,YAAR,CAAjB;;AAEA,IAAIE,UAAU,EAAd;;AAEA,IAAIC,gBAAgB,IAApB;;AAEA,IAAIC,MAAM;AACNC,UAAM,YAAW;AACbJ,iBAASK,EAAT,CAAY,aAAZ,EAA2B,YAAW;AAClCC,cAAEC,IAAF,CAAON,OAAP,EAAgB,UAASO,MAAT,EAAiB;AAC7BA,uBAAOC,IAAP;AACH,aAFD;AAGH,SAJD;AAKH,KAPK;AAQN;AACAC,iBAAa,UAASC,EAAT,EAAaC,cAAb,EAA6B;AACtCX,gBAAQU,EAAR,IAAc,IAAIb,UAAJ,CAAe,WAAf,EAA4BI,aAA5B,EAA2CU,cAA3C,CAAd;AACA,eAAOX,QAAQU,EAAR,EAAYE,KAAZ,GACPC,KADO,CACA,UAASC,CAAT,EAAY;AACfC,oBAAQC,GAAR,CAAY,oBAAZ,EAAkCf,aAAlC,EAAiDa,CAAjD;AACAb;AACA,mBAAOC,IAAIO,WAAJ,CAAgBC,EAAhB,EAAoBC,cAApB,CAAP;AACH,SALM,EAKJM,IALI,CAKC,YAAW;AACf,gBAAIV,SAASP,QAAQU,EAAR,CAAb;AACAT;AACA,mBAAO,YAAYM,OAAOW,IAAnB,GAA0B,GAA1B,GAAgCX,OAAOY,IAA9C;AACH,SATM,CAAP;AAUH,KArBK;AAsBNC,gBAAY,UAASV,EAAT,EAAa;AACrB,YAAIV,QAAQU,EAAR,CAAJ,EAAiB;AACbV,oBAAQU,EAAR,EAAYF,IAAZ;AACH;AACD,eAAOa,QAAQC,OAAR,EAAP;AACH;AA3BK,CAAV;;AA8BAC,OAAOC,OAAP,GAAiBtB,GAAjB","file":"webservers.js","sourcesContent":["'use strict';\n\nconst HttpServer = require('./webserver').HttpServer;\nconst eventbus = require('./eventbus');\n\nvar servers = {};\n\nvar availablePort = 8022;\n\nvar api = {\n    hook: function() {\n        eventbus.on(\"windowclose\", function() {\n            _.each(servers, function(server) {\n                server.stop();\n            });\n        });\n    },\n    // Returns (via promise) URL to server\n    startServer: function(id, requestHandler) {\n        servers[id] = new HttpServer(\"127.0.0.1\", availablePort, requestHandler);\n        return servers[id].start().\n        catch (function(e) {\n            console.log(\"Couldn't listen to\", availablePort, e);\n            availablePort++;\n            return api.startServer(id, requestHandler);\n        }).then(function() {\n            var server = servers[id];\n            availablePort++;\n            return \"http://\" + server.host + \":\" + server.port;\n        });\n    },\n    stopServer: function(id) {\n        if (servers[id]) {\n            servers[id].stop();\n        }\n        return Promise.resolve();\n    }\n};\n\nmodule.exports = api;\n"]}