{"version":3,"sources":["../../src/js/state.js"],"names":["ipcRenderer","WEBPACK","require","eventbus","fs","config","win","opts","state","declare","isHygienic","getPreference","get","indexOf","api","hook","once","bounds","width","Math","min","max","window","screen","availWidth","height","availHeight","x","availLeft","y","availTop","setBounds","addResizeListener","getBounds","left","set","on","event","init","setTimeout","load","key","value","emit","Promise","resolve","readFile","then","json","JSON","parse","catch","err","save","writeFile","toJSON","stringify","reset","module","exports"],"mappings":"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","file":"state.js","sourcesContent":["\"use strict\";\n/**\n * The state module keeps track of the editor state, saved to the /.zedstate file\n * state that is typically being tracked includes open files, which file is open in\n * which split, the split config itself, cursor positions, selections, part of the\n * undo stack etc.\n */\n\n// TODO: handle messages from chrome app\nlet ipcRenderer;\nif (!WEBPACK) {\n    ipcRenderer = require('electron').ipcRenderer;\n}\nconst eventbus = require('./eventbus');\nconst fs = require('./fs');\nconst config = require('./config');\nconst win = require('./window');\n\nvar opts = require(\"./lib/options\");\n\nvar state = {};\n\neventbus.declare(\"stateloaded\");\n\nfunction isHygienic() {\n    return config.getPreference(\"hygienicMode\") || (config.getPreference(\"hygienicModeRemote\") && opts.get(\"url\").indexOf(\"http\") === 0);\n}\n\nvar api = {\n    hook: function() {\n        eventbus.once(\"stateloaded\", function() {\n            var bounds = api.get('window');\n            if (bounds) {\n                bounds.width = Math.min(Math.max(300, bounds.width), window.screen.availWidth);\n                bounds.height = Math.min(Math.max(300, bounds.height), window.screen.availHeight);\n                bounds.x = Math.max(window.screen.availLeft, Math.min(bounds.x, window.screen.availWidth - bounds.width));\n                bounds.y = Math.max(window.screen.availTop, Math.min(bounds.y, window.screen.availHeight - bounds.height));\n                win.setBounds(bounds);\n            }\n\n            if (WEBPACK) {\n                win.addResizeListener(function() {\n                    var bounds = win.getBounds();\n                    // on windows minimized window reports left=-32000\n                    if (bounds.left != -32000) {\n                        api.set(\"window\", bounds);\n                    }\n                });\n            } else {\n                ipcRenderer.on('save-bounds', (event, bounds) => {\n                    api.set('window', bounds);\n                });\n            }\n        });\n    },\n    init: function() {\n        // Delaying loading a bit for other plug-ins to run their inits\n        setTimeout(function() {\n            api.load();\n        });\n    },\n    set: function(key, value) {\n        state[key] = value;\n    },\n    get: function(key) {\n        return state[key];\n    },\n    load: function() {\n        if (isHygienic()) {\n            state = {};\n            eventbus.emit(\"stateloaded\", api);\n            return Promise.resolve({});\n        }\n        return fs.readFile(\"/.zedstate\").then(function(json) {\n            state = JSON.parse(json);\n            eventbus.emit(\"stateloaded\", api);\n            return state;\n        }).catch(function(err) {\n            state = {};\n            eventbus.emit(\"stateloaded\", api);\n            return state;\n        });\n    },\n    save: function() {\n        if (!isHygienic()) {\n            return fs.writeFile(\"/.zedstate\", api.toJSON());\n        } else {\n            return Promise.resolve();\n        }\n    },\n    toJSON: function() {\n        return JSON.stringify(state);\n    },\n    reset: function() {\n        state = {};\n        return api.save();\n    }\n};\n\nmodule.exports = api;\n"]}