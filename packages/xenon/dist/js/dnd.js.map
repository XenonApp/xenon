{"version":3,"sources":["../../src/js/dnd.js"],"names":["async","require","ui","fs","goto","api","init","el","document","querySelector","isFile","e","types","dataTransfer","Array","prototype","indexOf","call","dragover","stopPropagation","preventDefault","dragleave","drop","console","log","unblockUI","filesDropped","addEventListener","saveFile","entry","rootPath","Promise","resolve","reject","fileReader","FileReader","onload","content","target","result","fullPath","writeFile","then","file","readAsBinaryString","saveDirectory","dir","reader","createReader","readEntries","entries","parForEach","next","isDirectory","data","i","items","length","item","push","webkitGetAsEntry","prompt","message","input","path","substring","blockUI","all","map","fetchFileList","module","exports"],"mappings":"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","file":"dnd.js","sourcesContent":["'use strict';\n\nconst async = require(\"./lib/async\");\nconst ui = require('./ui');\nconst fs = require('./fs');\nconst goto = require('./goto');\n\nvar api = {\n    init: function() {\n        var el = document.querySelector(\"body\");\n\n        function isFile(e) {\n            var types = e.dataTransfer.types;\n            if (types && Array.prototype.indexOf.call(types, \"Files\") !== -1)\n                return true;\n        }\n\n        function dragover(e) {\n            if (!isFile(e)) return;\n            e.stopPropagation();\n            e.preventDefault();\n        }\n\n        function dragleave(e) {\n            if (!isFile(e)) return;\n            e.stopPropagation();\n            e.preventDefault();\n        }\n\n        function drop(e) {\n            if (!isFile(e)) return;\n            console.log(\"Dropped\");\n            e.stopPropagation();\n            e.preventDefault();\n\n            ui.unblockUI();\n\n            filesDropped(e.dataTransfer);\n        }\n\n        el.addEventListener('dragover', dragover, false);\n        el.addEventListener('dragleave', dragleave, false);\n        el.addEventListener('drop', drop, false);\n    }\n};\n\nfunction saveFile(entry, rootPath) {\n    return new Promise(function(resolve, reject) {\n        var fileReader = new FileReader();\n        fileReader.onload = function(e) {\n            var content = e.target.result;\n            console.log(entry.fullPath);\n            fs.writeFile(rootPath + entry.fullPath, content, true).then(resolve, reject);\n        };\n        entry.file(function(file) {\n            fileReader.readAsBinaryString(file);\n        });\n    });\n}\n\nfunction saveDirectory(dir, rootPath) {\n    // TODO: This won't work with directories with > 100 files yet (need to depleate reader)\n    return new Promise(function(resolve, reject) {\n        var reader = dir.createReader();\n        reader.readEntries(function(entries) {\n            async.parForEach(entries, function(entry, next) {\n                if (entry.isDirectory) {\n                    saveDirectory(entry, rootPath, next);\n                } else {\n                    saveFile(entry, rootPath, next);\n                }\n            }, resolve);\n        }, reject);\n    });\n}\n\nfunction filesDropped(data) {\n    var entries = [];\n    for (var i = 0; i < data.items.length; i++) {\n        var item = data.items[i];\n        entries.push(item.webkitGetAsEntry());\n    }\n    ui.prompt({\n        message: \"Uploading files. Desired path prefix:\",\n        input: \"/\"\n    }).then(function(path) {\n        if (!path) {\n            return;\n        }\n        if (path[path.length - 1] === \"/\") {\n            path = path.substring(0, path.length - 1);\n        }\n        ui.blockUI(\"Uploading...\");\n        return Promise.all(entries.map(function(entry) {\n            if (entry.isFile) {\n                return saveFile(entry, path);\n            } else if (entry.isDirectory) {\n                return saveDirectory(entry, path);\n            }\n        })).then(function() {\n            goto.fetchFileList();\n            ui.unblockUI();\n        });\n    });\n}\n\nmodule.exports = api;\n"]}