{"version":3,"sources":["../../src/js/sandbox.electron.js"],"names":["fork","require","path","id","waitingForReply","Sandbox","constructor","name","lastUse","Date","now","destroy","childProcess","console","log","kill","execCommand","spec","session","Promise","resolve","reject","$cmdInfo","_","extend","err","result","inputs","input","getInputable","send","command","configDir","getDir","url","scriptUrl","fn","data","filename","join","__dirname","silent","stdout","setEncoding","on","stderr","error","message","handleApiRequest","handleResponse","mod","module","call","replyTo","apply","args","then","catch","reset","exports"],"mappings":"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","file":"sandbox.electron.js","sourcesContent":["'use strict';\n/**\n * This module manages the Zed sandbox, the sandbox is used to run user\n * provided code, either fetched from the Zed code base itself, or fetched\n * from remote URLs.\n *\n * Sandboxed code cannot crash Zed itself, but can call some Zed-specific APIs.\n * These APIs live in the xenon global in the sandbox, and are\n * essentially proxies proxying the request to Zed itself via postMessage\n * communication. The APIs interfaces are defined in sandbox/interface/zed/*\n * and the Zed side is implemented in sandbox/impl/zed/*.\n */\n\nconst fork = require('child_process').fork;\nconst path = require('path');\n\nvar id = 0;\nvar waitingForReply = {};\n\nclass Sandbox {\n    constructor(name) {\n        this.name = name;\n        this.lastUse = Date.now();\n        this.fork();\n    }\n\n    destroy() {\n        if (this.childProcess) {\n            console.log('destroy sandbox');\n            this.childProcess.kill();\n        }\n    }\n\n    execCommand(name, spec, session) {\n        return new Promise((resolve, reject) => {\n            if (session.$cmdInfo) {\n                spec = _.extend({}, spec, session.$cmdInfo);\n                session.$cmdInfo = null;\n            }\n\n            id++;\n            waitingForReply[id] = (err, result) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(result);\n                }\n            };\n\n\n            // This data can be requested as input in commands.json\n            var inputs = {};\n            for (var input in (spec.inputs || {})) {\n                inputs[input] = require(\"./sandboxes\").getInputable(session, input);\n            }\n            this.childProcess.send({\n                command: 'exec',\n                configDir: require('./config').getDir(),\n                url: spec.scriptUrl,\n                fn: spec.fn,\n                data: _.extend({}, spec, {\n                    path: session.filename,\n                    inputs: inputs\n                }),\n                id: id\n            });\n        });\n    }\n\n    fork() {\n        this.childProcess = fork(path.join(__dirname, '..', 'sandbox', 'sandbox'), [], {\n            silent: true\n        });\n\n        this.childProcess.stdout.setEncoding('utf-8');\n        this.childProcess.stdout.on('data', data => {\n            console.log(data);\n        });\n\n        this.childProcess.stderr.setEncoding('utf-8');\n        this.childProcess.stderr.on('data', data => {\n            console.error(data);\n        });\n\n        this.childProcess.on('message', message => {\n            if (message.command === 'api-request') {\n                this.handleApiRequest(message);\n            } else if (message.command === 'results') {\n                this.handleResponse(message);\n            }\n        });\n\n        this.childProcess.on('error', (err) => {\n            console.error(err);\n        });\n\n        this.childProcess.on('exit', () => {\n            console.log(`sandbox: ${this.name} exited`);\n        });\n    }\n\n    handleApiRequest(data) {\n        const mod = require(\"./sandbox/\" + data.module);\n\n        if (!mod[data.call]) {\n            return this.childProcess.send({\n                message: 'api-response',\n                replyTo: data.id,\n                err: \"No such method: \" + mod\n            });\n        }\n        mod[data.call].apply(mod, data.args).then(result => {\n            this.childProcess.send({\n                command: 'api-response',\n                replyTo: data.id,\n                result: result\n            });\n        }).catch(err => {\n            this.childProcess.send({\n                command: 'api-response',\n                replyTo: data.id,\n                err: err\n            });\n        });\n    }\n\n    handleResponse(data) {\n        const replyTo = data.replyTo;\n        if (!replyTo) {\n            return;\n        }\n        var err = data.err;\n        var result = data.result;\n\n        if (waitingForReply[replyTo]) {\n            waitingForReply[replyTo](err, result);\n            delete waitingForReply[replyTo];\n        } else {\n            console.error(\"Got response to unknown message id:\", replyTo);\n        }\n    }\n\n    reset() {\n        this.destroy();\n        this.fork();\n    }\n}\n\nmodule.exports = Sandbox;\n"]}