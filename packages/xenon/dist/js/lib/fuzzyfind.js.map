{"version":3,"sources":["../../../src/js/lib/fuzzyfind.js"],"names":["escapeRegExp","str","replace","fuzzyFilter","pattern","files","closeMatchRegex","split","join","distantMatchRegex","r1","RegExp","r2","matches","map","f","name","path","score","i","length","file","m","exec","push","index","m2","module","exports"],"mappings":"AAAA;;AAEA;;AACA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,WAAOA,IAAIC,OAAJ,CAAY,qCAAZ,EAAmD,MAAnD,CAAP;AACH;;AAED,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AACjC,QAAIC,kBAAkBN,aAAaI,OAAb,CAAtB;AACAE,sBAAkBA,gBAAgBC,KAAhB,CAAsB,KAAtB,EAA6BC,IAA7B,CAAkC,KAAlC,CAAlB;AACAF,sBAAkBA,gBAAgBJ,OAAhB,CAAwB,OAAxB,EAAiC,WAAjC,CAAlB;AACA,QAAIO,oBAAoBT,aAAaI,OAAb,EAAsBG,KAAtB,CAA4B,EAA5B,EAAgCC,IAAhC,CAAqC,KAArC,CAAxB;AACA,QAAIE,KAAK,IAAIC,MAAJ,CAAWL,eAAX,EAA4B,GAA5B,CAAT;AACA,QAAIM,KAAK,IAAID,MAAJ,CAAWF,iBAAX,EAA8B,GAA9B,CAAT;AACA,QAAII,UAAU,EAAd;AACA,QAAG,CAACT,OAAJ,EAAa;AACT,eAAOC,MAAMS,GAAN,CAAU,UAASC,CAAT,EAAY;AACzB,mBAAO;AACHC,sBAAMD,CADH;AAEHE,sBAAMF,CAFH;AAGHG,uBAAO;AAHJ,aAAP;AAKH,SANM,CAAP;AAOH;AACD,SAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAId,MAAMe,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,YAAIE,OAAOhB,MAAMc,CAAN,CAAX;AACA,YAAIG,IAAIZ,GAAGa,IAAH,CAAQF,IAAR,CAAR;AACA,YAAGC,CAAH,EAAM;AACFT,oBAAQW,IAAR,CAAa;AACTR,sBAAMK,IADG;AAETJ,sBAAMI,IAFG;AAGTH,uBAAO,UAAUG,KAAKD,MAAL,GAAcE,EAAE,CAAF,EAAKF,MAAnB,GAA4BE,EAAEG,KAAxC;AAHE,aAAb;AAKH,SAND,MAMO;AACH;AACA,gBAAIC,KAAKd,GAAGW,IAAH,CAAQF,IAAR,CAAT;AACA,gBAAGK,EAAH,EAAO;AACHb,wBAAQW,IAAR,CAAa;AACTR,0BAAMK,IADG;AAETJ,0BAAMI,IAFG;AAGTH,2BAAO,SAASG,KAAKD,MAAL,GAAcM,GAAG,CAAH,EAAMN,MAApB,GAA6BM,GAAGD,KAAzC;AAHE,iBAAb;AAKH;AACJ;AACJ;AACD,WAAOZ,OAAP;AACH;;AAEDc,OAAOC,OAAP,GAAiB,UAASvB,KAAT,EAAgBD,OAAhB,EAAyB;AACtC,WAAOD,YAAYC,OAAZ,EAAqBC,KAArB,CAAP;AACH,CAFD","file":"fuzzyfind.js","sourcesContent":["'use strict';\n\n// EVEN NEWER fuzzy find implementation\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nfunction fuzzyFilter(pattern, files) {\n    var closeMatchRegex = escapeRegExp(pattern);\n    closeMatchRegex = closeMatchRegex.split(/\\s+/).join(\".*?\");\n    closeMatchRegex = closeMatchRegex.replace(/\\\\\\//g, \".*?\\\\/.*?\");\n    var distantMatchRegex = escapeRegExp(pattern).split('').join(\".*?\");\n    var r1 = new RegExp(closeMatchRegex, \"i\");\n    var r2 = new RegExp(distantMatchRegex, \"i\");\n    var matches = [];\n    if(!pattern) {\n        return files.map(function(f) {\n            return {\n                name: f,\n                path: f,\n                score: 1000\n            };\n        });\n    }\n    for(var i = 0; i < files.length; i++) {\n        var file = files[i];\n        var m = r1.exec(file);\n        if(m) {\n            matches.push({\n                name: file,\n                path: file,\n                score: 100000 - (file.length - m[0].length - m.index)\n            });\n        } else {\n            // Let's try the distant matcher\n            var m2 = r2.exec(file);\n            if(m2) {\n                matches.push({\n                    name: file,\n                    path: file,\n                    score: 10000 - (file.length - m2[0].length - m2.index)\n                });\n            }\n        }\n    }\n    return matches;\n}\n\nmodule.exports = function(files, pattern) {\n    return fuzzyFilter(pattern, files);\n};\n"]}