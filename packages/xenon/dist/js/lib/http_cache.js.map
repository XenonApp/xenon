{"version":3,"sources":["../../../src/js/lib/http_cache.js"],"names":["sessionCache","module","exports","fetchUrl","url","options","cacheKey","refreshTimeout","Infinity","hasNotTimedOut","entry","Date","now","time","httpGet","Promise","resolve","reject","$","ajax","method","dataType","success","result","cacheEntry","content","persistent","obj","chrome","storage","local","set","error","xhr","status","cachedGet","callback","fallbackCache","catch","flushCache"],"mappings":";;AAAA;AACA,IAAIA,eAAe,EAAnB;;AAEA;;;;;;;AAOAC,OAAOC,OAAP,CAAeC,QAAf,GAA0B,UAASC,GAAT,EAAcC,OAAd,EAAuB;AAC7C,QAAIC,WAAW,WAAWF,GAA1B;;AAEA,QAAIG,iBAAiBC,QAArB;AACA,QAAIH,QAAQE,cAAZ,EAA4B;AACxBA,yBAAiBF,QAAQE,cAAR,GAAyB,IAA1C;AACH;;AAED,aAASE,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,eAAOA,SAAUC,KAAKC,GAAL,KAAaF,MAAMG,IAApB,GAA4BN,cAA5C;AACH;;AAED,aAASO,OAAT,GAAmB;AACf,eAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACzCC,cAAEC,IAAF,CAAO;AACHC,wBAAQ,KADL;AAEHhB,qBAAKA,GAFF;AAGHiB,0BAAU,MAHP;AAIHC,yBAAS,UAASC,MAAT,EAAiB;AACtB,wBAAIC,aAAa;AACbX,8BAAMF,KAAKC,GAAL,EADO;AAEba,iCAASF;AAFI,qBAAjB;AAIA,wBAAIlB,QAAQqB,UAAZ,EAAwB;AACpB,4BAAIC,MAAM,EAAV;AACAA,4BAAIrB,QAAJ,IAAgBkB,UAAhB;AACAI,+BAAOC,OAAP,CAAeC,KAAf,CAAqBC,GAArB,CAAyBJ,GAAzB;AACH;AACD3B,iCAAaI,GAAb,IAAoBoB,UAApB;AACAR,4BAAQO,MAAR;AACH,iBAhBE;AAiBHS,uBAAO,UAASC,GAAT,EAAc;AACjBhB,2BAAOgB,IAAIC,MAAX;AACH;AAnBE,aAAP;AAqBH,SAtBM,CAAP;AAuBH;;AAED,aAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,YAAI1B,QAAQV,aAAaI,GAAb,CAAZ;AACA,YAAIK,eAAeC,KAAf,CAAJ,EAA2B;AACvB,mBAAOK,QAAQC,OAAR,CAAgBN,MAAMe,OAAtB,CAAP;AACH;AACD,eAAOX,QAAQsB,QAAR,CAAP;AACH;;AAED,QAAI/B,QAAQgC,aAAZ,EAA2B;AACvB,eAAOvB,UAAUwB,KAAV,CAAgB,YAAW;AAC9B,mBAAOH,WAAP;AACH,SAFM,CAAP;AAGH,KAJD,MAIO;AACH,eAAOA,WAAP;AACH;AACJ,CArDD;;AAuDAlC,OAAOC,OAAP,CAAeqC,UAAf,GAA4B,YAAW;AACnCvC,mBAAe,EAAf;AACH,CAFD","file":"http_cache.js","sourcesContent":["/* global chrome, $ */\nvar sessionCache = {};\n\n/**\n * Options:\n * - persistent: save to local storage\n * - fallbackCache: attempt HTTP call first, if it fails use cache\n * - refreshTimeout: (in seconds) use cache if cached more recently than the timeout,\n *                   otherwise attempt refresh, if it fails, use cache anyway\n */\nmodule.exports.fetchUrl = function(url, options) {\n    var cacheKey = \"cache:\" + url;\n\n    var refreshTimeout = Infinity;\n    if (options.refreshTimeout) {\n        refreshTimeout = options.refreshTimeout * 1000;\n    }\n\n    function hasNotTimedOut(entry) {\n        return entry && (Date.now() - entry.time) < refreshTimeout;\n    }\n\n    function httpGet() {\n        return new Promise(function(resolve, reject) {\n            $.ajax({\n                method: \"GET\",\n                url: url,\n                dataType: \"text\",\n                success: function(result) {\n                    var cacheEntry = {\n                        time: Date.now(),\n                        content: result\n                    };\n                    if (options.persistent) {\n                        var obj = {};\n                        obj[cacheKey] = cacheEntry;\n                        chrome.storage.local.set(obj);\n                    }\n                    sessionCache[url] = cacheEntry;\n                    resolve(result);\n                },\n                error: function(xhr) {\n                    reject(xhr.status);\n                }\n            });\n        });\n    }\n\n    function cachedGet(callback) {\n        var entry = sessionCache[url];\n        if (hasNotTimedOut(entry)) {\n            return Promise.resolve(entry.content);\n        }\n        return httpGet(callback);\n    }\n\n    if (options.fallbackCache) {\n        return httpGet().catch(function() {\n            return cachedGet();\n        });\n    } else {\n        return cachedGet();\n    }\n};\n\nmodule.exports.flushCache = function() {\n    sessionCache = {};\n};\n"]}