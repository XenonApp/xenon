{"version":3,"sources":["../../../src/js/lib/emitter.js"],"names":["define","require","exports","module","EventEmitter","Emitter","obj","mixin","key","prototype","on","addEventListener","event","fn","_callbacks","push","once","self","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","callbacks","cb","i","splice","emit","args","slice","call","len","listeners","hasListeners","addListener","setMaxListeners"],"mappings":"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","file":"emitter.js","sourcesContent":["define(function(require, exports, module) {\n    /**\n     * Expose `Emitter`.\n     */\n\n    exports.EventEmitter = Emitter;\n\n    /**\n     * Initialize a new `Emitter`.\n     *\n     * @api public\n     */\n\n    function Emitter(obj) {\n        if (obj) return mixin(obj);\n    };\n\n    /**\n     * Mixin the emitter properties.\n     *\n     * @param {Object} obj\n     * @return {Object}\n     * @api private\n     */\n\n    function mixin(obj) {\n        for (var key in Emitter.prototype) {\n            obj[key] = Emitter.prototype[key];\n        }\n        return obj;\n    }\n\n    /**\n     * Listen on the given `event` with `fn`.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     * @return {Emitter}\n     * @api public\n     */\n\n    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {\n        this._callbacks = this._callbacks || {};\n        (this._callbacks[event] = this._callbacks[event] || [])\n            .push(fn);\n        return this;\n    };\n\n    /**\n     * Adds an `event` listener that will be invoked a single\n     * time then automatically removed.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     * @return {Emitter}\n     * @api public\n     */\n\n    Emitter.prototype.once = function(event, fn) {\n        var self = this;\n        this._callbacks = this._callbacks || {};\n\n        function on() {\n            self.off(event, on);\n            fn.apply(this, arguments);\n        }\n\n        on.fn = fn;\n        this.on(event, on);\n        return this;\n    };\n\n    /**\n     * Remove the given callback for `event` or all\n     * registered callbacks.\n     *\n     * @param {String} event\n     * @param {Function} fn\n     * @return {Emitter}\n     * @api public\n     */\n\n    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {\n        this._callbacks = this._callbacks || {};\n\n        // all\n        if (0 == arguments.length) {\n            this._callbacks = {};\n            return this;\n        }\n\n        // specific event\n        var callbacks = this._callbacks[event];\n        if (!callbacks) return this;\n\n        // remove all handlers\n        if (1 == arguments.length) {\n            delete this._callbacks[event];\n            return this;\n        }\n\n        // remove specific handler\n        var cb;\n        for (var i = 0; i < callbacks.length; i++) {\n            cb = callbacks[i];\n            if (cb === fn || cb.fn === fn) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n        return this;\n    };\n\n    /**\n     * Emit `event` with the given args.\n     *\n     * @param {String} event\n     * @param {Mixed} ...\n     * @return {Emitter}\n     */\n\n    Emitter.prototype.emit = function(event) {\n        this._callbacks = this._callbacks || {};\n        var args = [].slice.call(arguments, 1),\n            callbacks = this._callbacks[event];\n\n        if (callbacks) {\n            callbacks = callbacks.slice(0);\n            for (var i = 0, len = callbacks.length; i < len; ++i) {\n                callbacks[i].apply(this, args);\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Return array of callbacks for `event`.\n     *\n     * @param {String} event\n     * @return {Array}\n     * @api public\n     */\n\n    Emitter.prototype.listeners = function(event) {\n        this._callbacks = this._callbacks || {};\n        return this._callbacks[event] || [];\n    };\n\n    /**\n     * Check if this emitter has `event` handlers.\n     *\n     * @param {String} event\n     * @return {Boolean}\n     * @api public\n     */\n\n    Emitter.prototype.hasListeners = function(event) {\n        return !!this.listeners(event).length;\n    };\n\n    // alias all the things!\n    Emitter.prototype.addListener = Emitter.prototype.on;\n    Emitter.prototype.removeListener = Emitter.prototype.off;\n    Emitter.prototype.removeAllListeners = Emitter.prototype.off;\n\n    Emitter.prototype.setMaxListeners = function() { /* noop */};\n\n    exports.EventEmitter = Emitter;\n});\n"]}