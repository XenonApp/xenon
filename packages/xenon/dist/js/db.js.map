{"version":3,"sources":["../../src/js/db.js"],"names":["eventbus","require","zedb","opts","declare","dbName","get","replace","db","api","hook","on","config","databases","getDatabases","Object","keys","length","init","checkSchemaChange","schema","getObjectStoreNames","contains","readStore","then","meta","lastUse","Date","now","writeStore","put","JSON","stringify","console","info","close","recreate","delete","setTimeout","open","objectStoreName","storeMeta","store","createObjectStore","keyPath","autoIncrement","indexes","indexName","indexMeta","createIndex","unique","multiEntry","add","key","db_","error","emit","err","module","exports"],"mappings":"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","file":"db.js","sourcesContent":["\"use strict\";\n\nconst eventbus = require('./eventbus');\n\nconst zedb = require(\"../dep/zedb\");\nconst opts = require(\"./lib/options\");\n\neventbus.declare(\"dbavailable\");\n\nvar dbName = '';\nif (opts.get('url')) {\n    dbName = opts.get(\"url\").replace(/[^\\w]+/g, \"_\");\n}\n\nvar db;\n\nvar api = {\n    get: get,\n    hook: function() {\n        eventbus.on(\"configchanged\", function(config) {\n            var databases = config.getDatabases();\n            if (Object.keys(databases).length > 0) {\n                if(!db) {\n                    init(databases);\n                } else {\n                    checkSchemaChange(databases)(db);\n                }\n            }\n        });\n    }\n};\n\nfunction checkSchemaChange(schema) {\n    return function(db) {\n        // Let's see if the schema changed since last time we opened it\n        if (db.getObjectStoreNames().contains(\"_meta\")) {\n            return db.readStore(\"_meta\").get(\"meta\").then(function(meta) {\n                meta.lastUse = Date.now();\n                db.writeStore(\"_meta\").put(meta);\n                if (JSON.stringify(meta.schema) !== JSON.stringify(schema)) {\n                    console.info(\"Schemas differ, destroying old database and recreating.\");\n                    db.close();\n                    return recreate();\n                } else {\n                    return db;\n                }\n            });\n        } else {\n            return recreate();\n        }\n\n        function recreate() {\n            return zedb.delete(dbName).then(function() {\n                setTimeout(function() {\n                    return init(schema);\n                }, 1000);\n            });\n        }\n    };\n}\n\nfunction init(schema) {\n    if (db) {\n        db.close();\n    }\n    return zedb.open(dbName, 1, function(db) {\n        // Let's create a fresh database\n        for (var objectStoreName in schema) {\n            var storeMeta = schema[objectStoreName];\n            var store = db.createObjectStore(objectStoreName, {\n                keyPath: storeMeta.keyPath,\n                autoIncrement: storeMeta.autoIncrement\n            });\n            if (storeMeta.indexes) {\n                for (var indexName in storeMeta.indexes) {\n                    var indexMeta = storeMeta.indexes[indexName];\n                    store.createIndex(indexName, indexMeta.keyPath, {\n                        unique: indexMeta.unique,\n                        multiEntry: indexMeta.multiEntry\n                    });\n                }\n            }\n            if (objectStoreName === \"_meta\") {\n                store.add({\n                    key: \"meta\",\n                    schema: schema\n                });\n            }\n        }\n    }).then(checkSchemaChange(schema)).then(function(db_) {\n        if(!db_) {\n            console.error(\"Got empty db variable\");\n        }\n        db = db_;\n        eventbus.emit(\"dbavailable\", db);\n        return db;\n    }, function(err) {\n        console.error(\"Could not create databases\", err);\n    });\n\n}\n\nfunction get() {\n    return db;\n}\n\nmodule.exports = api;\n"]}