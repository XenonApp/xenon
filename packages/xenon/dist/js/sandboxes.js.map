{"version":3,"sources":["../../src/js/sandboxes.js"],"names":["ipcRenderer","WEBPACK","require","Sandbox","command","inputables","sandboxes","get","name","console","log","cleanup","sandbox","lastUse","Date","now","destroy","setInterval","api","hook","on","send","defineInputable","fn","getInputable","session","execCommand","spec","define","doc","exec","reset","readOnly","module","exports"],"mappings":"AAAA;;AAEA;;AACA,IAAIA,WAAJ;AACA,IAAI,CAACC,OAAL,EAAc;AACVD,kBAAcE,QAAQ,UAAR,EAAoBF,WAAlC;AACH;;AAED,MAAMG,UAAUD,QAAQ,WAAR,CAAhB;AACA,MAAME,UAAUF,QAAQ,WAAR,CAAhB;;AAEA,IAAIG,aAAa,EAAjB;AACA,IAAIC,YAAY,EAAhB;;AAGA,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACf,QAAG,CAACF,UAAUE,IAAV,CAAJ,EAAqB;AACjBC,gBAAQC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACAF,kBAAUE,IAAV,IAAkB,IAAIL,OAAJ,CAAYK,IAAZ,CAAlB;AACH;AACD,WAAOF,UAAUE,IAAV,CAAP;AACH;;AAED,SAASG,OAAT,GAAmB;AACf,SAAK,IAAIH,IAAT,IAAiBF,SAAjB,EAA4B;AACxB,cAAMM,UAAUN,UAAUE,IAAV,CAAhB;AACA,YAAII,QAAQC,OAAR,GAAkBC,KAAKC,GAAL,KAAa,MAAM,IAAzC,EAA+C;AAC3CN,oBAAQC,GAAR,CAAY,oBAAZ,EAAkCF,IAAlC;AACAI,oBAAQI,OAAR;AACA,mBAAOV,UAAUE,IAAV,CAAP;AACH;AACJ;AACJ;;AAEDS,YAAYN,OAAZ,EAAqB,KAArB;;AAEA,IAAIO,MAAM;AACNC,UAAM,YAAW;AACb,YAAI,CAAClB,OAAL,EAAc;AACVD,wBAAYoB,EAAZ,CAAe,mBAAf,EAAoC,MAAM;AACtC,qBAAKJ,OAAL;AACAhB,4BAAYqB,IAAZ,CAAiB,uBAAjB;AACH,aAHD;AAIH;AACJ,KARK;AASNC,qBAAiB,UAASd,IAAT,EAAee,EAAf,EAAmB;AAChClB,mBAAWG,IAAX,IAAmBe,EAAnB;AACH,KAXK;AAYNC,kBAAc,UAASC,OAAT,EAAkBjB,IAAlB,EAAwB;AAClC,eAAOH,WAAWG,IAAX,KAAoBH,WAAWG,IAAX,EAAiBiB,OAAjB,CAA3B;AACH,KAdK;AAeNC,iBAAa,UAASlB,IAAT,EAAemB,IAAf,EAAqBF,OAArB,EAA8B;AACvC,YAAIb,UAAUL,IAAIoB,KAAKf,OAAL,IAAgB,SAApB,CAAd;AACAA,gBAAQC,OAAR,GAAkBC,KAAKC,GAAL,EAAlB;AACA,eAAOH,QAAQc,WAAR,CAAoBlB,IAApB,EAA0BmB,IAA1B,EAAgCF,OAAhC,CAAP;AACH,KAnBK;AAoBNT,aAAS,YAAW;AAChB,aAAK,IAAIR,IAAT,IAAiBF,SAAjB,EAA4B;AACxBG,oBAAQC,GAAR,CAAY,oBAAZ,EAAkCF,IAAlC;AACAF,sBAAUE,IAAV,EAAgBQ,OAAhB;AACA,mBAAOV,UAAUE,IAAV,CAAP;AACH;AACJ;AA1BK,CAAV;;AA6BAJ,QAAQwB,MAAR,CAAe,eAAf,EAAgC;AAC5BC,SAAK,8DAA8D,iEAA9D,GAAkI,iBAD3G;AAE5BC,UAAM,YAAW;AACb,aAAK,IAAItB,IAAT,IAAiBF,SAAjB,EAA4B;AACxBA,sBAAUE,IAAV,EAAgBuB,KAAhB;AACH;AACJ,KAN2B;AAO5BC,cAAU;AAPkB,CAAhC;;AAUAC,OAAOC,OAAP,GAAiBhB,GAAjB","file":"sandboxes.js","sourcesContent":["'use strict';\n\n// TODO: figure out sandboxes for chrome\nlet ipcRenderer;\nif (!WEBPACK) {\n    ipcRenderer = require('electron').ipcRenderer;\n}\n\nconst Sandbox = require('./sandbox');\nconst command = require('./command');\n\nvar inputables = {};\nvar sandboxes = {};\n\n\nfunction get(name) {\n    if(!sandboxes[name]) {\n        console.log(\"Creating sandbox\", name);\n        sandboxes[name] = new Sandbox(name);\n    }\n    return sandboxes[name];\n}\n\nfunction cleanup() {\n    for (let name in sandboxes) {\n        const sandbox = sandboxes[name];\n        if (sandbox.lastUse < Date.now() - 120 * 1000) {\n            console.log(\"Destroying sandbox\", name);\n            sandbox.destroy();\n            delete sandboxes[name];\n        }\n    }\n}\n\nsetInterval(cleanup, 20000);\n\nvar api = {\n    hook: function() {\n        if (!WEBPACK) {\n            ipcRenderer.on('destroy-sandboxes', () => {\n                this.destroy();\n                ipcRenderer.send('did-destroy-sandboxes');\n            });\n        }\n    },\n    defineInputable: function(name, fn) {\n        inputables[name] = fn;\n    },\n    getInputable: function(session, name) {\n        return inputables[name] && inputables[name](session);\n    },\n    execCommand: function(name, spec, session) {\n        var sandbox = get(spec.sandbox || \"default\");\n        sandbox.lastUse = Date.now();\n        return sandbox.execCommand(name, spec, session);\n    },\n    destroy: function() {\n        for (let name in sandboxes) {\n            console.log(\"Destroying sandbox\", name);\n            sandboxes[name].destroy();\n            delete sandboxes[name];\n        }\n    }\n};\n\ncommand.define(\"Sandbox:Reset\", {\n    doc: \"Reload all sandbox code. If you've made changes to a Zed \" + \"extension in your sandbox, you must run this for those changes \" + \"to take effect.\",\n    exec: function() {\n        for (let name in sandboxes) {\n            sandboxes[name].reset();\n        }\n    },\n    readOnly: true\n});\n\nmodule.exports = api;\n"]}